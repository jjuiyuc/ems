// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CustomerInfo is an object representing the database table.
type CustomerInfo struct {
	ID           int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	CustomerID   string       `boil:"customer_id" json:"customer_id" toml:"customer_id" yaml:"customer_id"`
	FieldID      string       `boil:"field_id" json:"field_id" toml:"field_id" yaml:"field_id"`
	Address      null.String  `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	Lat          null.Float32 `boil:"lat" json:"lat,omitempty" toml:"lat" yaml:"lat,omitempty"`
	Lng          null.Float32 `boil:"lng" json:"lng,omitempty" toml:"lng" yaml:"lng,omitempty"`
	WeatherLat   null.Float32 `boil:"weather_lat" json:"weather_lat,omitempty" toml:"weather_lat" yaml:"weather_lat,omitempty"`
	WeatherLng   null.Float32 `boil:"weather_lng" json:"weather_lng,omitempty" toml:"weather_lng" yaml:"weather_lng,omitempty"`
	Timezone     null.String  `boil:"timezone" json:"timezone,omitempty" toml:"timezone" yaml:"timezone,omitempty"`
	PowerCompany null.String  `boil:"power_company" json:"power_company,omitempty" toml:"power_company" yaml:"power_company,omitempty"`
	VoltageType  null.String  `boil:"voltage_type" json:"voltage_type,omitempty" toml:"voltage_type" yaml:"voltage_type,omitempty"`
	TouType      null.String  `boil:"tou_type" json:"tou_type,omitempty" toml:"tou_type" yaml:"tou_type,omitempty"`
	CreatedAt    time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    null.Time    `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *customerInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L customerInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CustomerInfoColumns = struct {
	ID           string
	CustomerID   string
	FieldID      string
	Address      string
	Lat          string
	Lng          string
	WeatherLat   string
	WeatherLng   string
	Timezone     string
	PowerCompany string
	VoltageType  string
	TouType      string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	CustomerID:   "customer_id",
	FieldID:      "field_id",
	Address:      "address",
	Lat:          "lat",
	Lng:          "lng",
	WeatherLat:   "weather_lat",
	WeatherLng:   "weather_lng",
	Timezone:     "timezone",
	PowerCompany: "power_company",
	VoltageType:  "voltage_type",
	TouType:      "tou_type",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var CustomerInfoTableColumns = struct {
	ID           string
	CustomerID   string
	FieldID      string
	Address      string
	Lat          string
	Lng          string
	WeatherLat   string
	WeatherLng   string
	Timezone     string
	PowerCompany string
	VoltageType  string
	TouType      string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "customer_info.id",
	CustomerID:   "customer_info.customer_id",
	FieldID:      "customer_info.field_id",
	Address:      "customer_info.address",
	Lat:          "customer_info.lat",
	Lng:          "customer_info.lng",
	WeatherLat:   "customer_info.weather_lat",
	WeatherLng:   "customer_info.weather_lng",
	Timezone:     "customer_info.timezone",
	PowerCompany: "customer_info.power_company",
	VoltageType:  "customer_info.voltage_type",
	TouType:      "customer_info.tou_type",
	CreatedAt:    "customer_info.created_at",
	UpdatedAt:    "customer_info.updated_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CustomerInfoWhere = struct {
	ID           whereHelperint
	CustomerID   whereHelperstring
	FieldID      whereHelperstring
	Address      whereHelpernull_String
	Lat          whereHelpernull_Float32
	Lng          whereHelpernull_Float32
	WeatherLat   whereHelpernull_Float32
	WeatherLng   whereHelpernull_Float32
	Timezone     whereHelpernull_String
	PowerCompany whereHelpernull_String
	VoltageType  whereHelpernull_String
	TouType      whereHelpernull_String
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpernull_Time
}{
	ID:           whereHelperint{field: "`customer_info`.`id`"},
	CustomerID:   whereHelperstring{field: "`customer_info`.`customer_id`"},
	FieldID:      whereHelperstring{field: "`customer_info`.`field_id`"},
	Address:      whereHelpernull_String{field: "`customer_info`.`address`"},
	Lat:          whereHelpernull_Float32{field: "`customer_info`.`lat`"},
	Lng:          whereHelpernull_Float32{field: "`customer_info`.`lng`"},
	WeatherLat:   whereHelpernull_Float32{field: "`customer_info`.`weather_lat`"},
	WeatherLng:   whereHelpernull_Float32{field: "`customer_info`.`weather_lng`"},
	Timezone:     whereHelpernull_String{field: "`customer_info`.`timezone`"},
	PowerCompany: whereHelpernull_String{field: "`customer_info`.`power_company`"},
	VoltageType:  whereHelpernull_String{field: "`customer_info`.`voltage_type`"},
	TouType:      whereHelpernull_String{field: "`customer_info`.`tou_type`"},
	CreatedAt:    whereHelpertime_Time{field: "`customer_info`.`created_at`"},
	UpdatedAt:    whereHelpernull_Time{field: "`customer_info`.`updated_at`"},
}

// CustomerInfoRels is where relationship names are stored.
var CustomerInfoRels = struct {
	Gateways string
}{
	Gateways: "Gateways",
}

// customerInfoR is where relationships are stored.
type customerInfoR struct {
	Gateways GatewaySlice `boil:"Gateways" json:"Gateways" toml:"Gateways" yaml:"Gateways"`
}

// NewStruct creates a new relationship struct
func (*customerInfoR) NewStruct() *customerInfoR {
	return &customerInfoR{}
}

func (r *customerInfoR) GetGateways() GatewaySlice {
	if r == nil {
		return nil
	}
	return r.Gateways
}

// customerInfoL is where Load methods for each relationship are stored.
type customerInfoL struct{}

var (
	customerInfoAllColumns            = []string{"id", "customer_id", "field_id", "address", "lat", "lng", "weather_lat", "weather_lng", "timezone", "power_company", "voltage_type", "tou_type", "created_at", "updated_at"}
	customerInfoColumnsWithoutDefault = []string{"customer_id", "field_id", "address", "lat", "lng", "weather_lat", "weather_lng", "timezone", "power_company", "voltage_type", "tou_type", "updated_at"}
	customerInfoColumnsWithDefault    = []string{"id", "created_at"}
	customerInfoPrimaryKeyColumns     = []string{"id"}
	customerInfoGeneratedColumns      = []string{}
)

type (
	// CustomerInfoSlice is an alias for a slice of pointers to CustomerInfo.
	// This should almost always be used instead of []CustomerInfo.
	CustomerInfoSlice []*CustomerInfo

	customerInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customerInfoType                 = reflect.TypeOf(&CustomerInfo{})
	customerInfoMapping              = queries.MakeStructMapping(customerInfoType)
	customerInfoPrimaryKeyMapping, _ = queries.BindMapping(customerInfoType, customerInfoMapping, customerInfoPrimaryKeyColumns)
	customerInfoInsertCacheMut       sync.RWMutex
	customerInfoInsertCache          = make(map[string]insertCache)
	customerInfoUpdateCacheMut       sync.RWMutex
	customerInfoUpdateCache          = make(map[string]updateCache)
	customerInfoUpsertCacheMut       sync.RWMutex
	customerInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single customerInfo record from the query.
func (q customerInfoQuery) One(exec boil.Executor) (*CustomerInfo, error) {
	o := &CustomerInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for customer_info")
	}

	return o, nil
}

// All returns all CustomerInfo records from the query.
func (q customerInfoQuery) All(exec boil.Executor) (CustomerInfoSlice, error) {
	var o []*CustomerInfo

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to CustomerInfo slice")
	}

	return o, nil
}

// Count returns the count of all CustomerInfo records in the query.
func (q customerInfoQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count customer_info rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q customerInfoQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if customer_info exists")
	}

	return count > 0, nil
}

// Gateways retrieves all the gateway's Gateways with an executor.
func (o *CustomerInfo) Gateways(mods ...qm.QueryMod) gatewayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`gateway`.`customer_info_id`=?", o.ID),
	)

	return Gateways(queryMods...)
}

// LoadGateways allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (customerInfoL) LoadGateways(e boil.Executor, singular bool, maybeCustomerInfo interface{}, mods queries.Applicator) error {
	var slice []*CustomerInfo
	var object *CustomerInfo

	if singular {
		object = maybeCustomerInfo.(*CustomerInfo)
	} else {
		slice = *maybeCustomerInfo.(*[]*CustomerInfo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &customerInfoR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerInfoR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gateway`),
		qm.WhereIn(`gateway.customer_info_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load gateway")
	}

	var resultSlice []*Gateway
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice gateway")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on gateway")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gateway")
	}

	if singular {
		object.R.Gateways = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gatewayR{}
			}
			foreign.R.CustomerInfo = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CustomerInfoID {
				local.R.Gateways = append(local.R.Gateways, foreign)
				if foreign.R == nil {
					foreign.R = &gatewayR{}
				}
				foreign.R.CustomerInfo = local
				break
			}
		}
	}

	return nil
}

// AddGateways adds the given related objects to the existing relationships
// of the customer_info, optionally inserting them as new records.
// Appends related to o.R.Gateways.
// Sets related.R.CustomerInfo appropriately.
func (o *CustomerInfo) AddGateways(exec boil.Executor, insert bool, related ...*Gateway) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CustomerInfoID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `gateway` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"customer_info_id"}),
				strmangle.WhereClause("`", "`", 0, gatewayPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CustomerInfoID = o.ID
		}
	}

	if o.R == nil {
		o.R = &customerInfoR{
			Gateways: related,
		}
	} else {
		o.R.Gateways = append(o.R.Gateways, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gatewayR{
				CustomerInfo: o,
			}
		} else {
			rel.R.CustomerInfo = o
		}
	}
	return nil
}

// CustomerInfos retrieves all the records using an executor.
func CustomerInfos(mods ...qm.QueryMod) customerInfoQuery {
	mods = append(mods, qm.From("`customer_info`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`customer_info`.*"})
	}

	return customerInfoQuery{q}
}

// FindCustomerInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCustomerInfo(exec boil.Executor, iD int, selectCols ...string) (*CustomerInfo, error) {
	customerInfoObj := &CustomerInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `customer_info` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, customerInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from customer_info")
	}

	return customerInfoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CustomerInfo) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no customer_info provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(customerInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	customerInfoInsertCacheMut.RLock()
	cache, cached := customerInfoInsertCache[key]
	customerInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			customerInfoAllColumns,
			customerInfoColumnsWithDefault,
			customerInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(customerInfoType, customerInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(customerInfoType, customerInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `customer_info` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `customer_info` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `customer_info` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, customerInfoPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into customer_info")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == customerInfoMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for customer_info")
	}

CacheNoHooks:
	if !cached {
		customerInfoInsertCacheMut.Lock()
		customerInfoInsertCache[key] = cache
		customerInfoInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CustomerInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CustomerInfo) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	key := makeCacheKey(columns, nil)
	customerInfoUpdateCacheMut.RLock()
	cache, cached := customerInfoUpdateCache[key]
	customerInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			customerInfoAllColumns,
			customerInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update customer_info, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `customer_info` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, customerInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(customerInfoType, customerInfoMapping, append(wl, customerInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update customer_info row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for customer_info")
	}

	if !cached {
		customerInfoUpdateCacheMut.Lock()
		customerInfoUpdateCache[key] = cache
		customerInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q customerInfoQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for customer_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for customer_info")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CustomerInfoSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `customer_info` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerInfoPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in customerInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all customerInfo")
	}
	return rowsAff, nil
}

var mySQLCustomerInfoUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CustomerInfo) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no customer_info provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	nzDefaults := queries.NonZeroDefaultSet(customerInfoColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCustomerInfoUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	customerInfoUpsertCacheMut.RLock()
	cache, cached := customerInfoUpsertCache[key]
	customerInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			customerInfoAllColumns,
			customerInfoColumnsWithDefault,
			customerInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			customerInfoAllColumns,
			customerInfoPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert customer_info, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`customer_info`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `customer_info` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(customerInfoType, customerInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(customerInfoType, customerInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for customer_info")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == customerInfoMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(customerInfoType, customerInfoMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for customer_info")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for customer_info")
	}

CacheNoHooks:
	if !cached {
		customerInfoUpsertCacheMut.Lock()
		customerInfoUpsertCache[key] = cache
		customerInfoUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CustomerInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CustomerInfo) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no CustomerInfo provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), customerInfoPrimaryKeyMapping)
	sql := "DELETE FROM `customer_info` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from customer_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for customer_info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q customerInfoQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no customerInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from customer_info")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for customer_info")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CustomerInfoSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `customer_info` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerInfoPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from customerInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for customer_info")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CustomerInfo) Reload(exec boil.Executor) error {
	ret, err := FindCustomerInfo(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomerInfoSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CustomerInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `customer_info`.* FROM `customer_info` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, customerInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in CustomerInfoSlice")
	}

	*o = slice

	return nil
}

// CustomerInfoExists checks if the CustomerInfo row exists.
func CustomerInfoExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `customer_info` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if customer_info exists")
	}

	return exists, nil
}
