// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Device is an object representing the database table.
type Device struct {
	ID            int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ModbusID      int         `boil:"modbusid" json:"modbusid" toml:"modbusid" yaml:"modbusid"`
	ModuleID      int64       `boil:"module_id" json:"moduleID" toml:"moduleID" yaml:"moduleID"`
	ModelID       int64       `boil:"model_id" json:"modelID" toml:"modelID" yaml:"modelID"`
	GWID          null.Int64  `boil:"gw_id" json:"gwID,omitempty" toml:"gwID" yaml:"gwID,omitempty"`
	PowerCapacity float32     `boil:"power_capacity" json:"powerCapacity" toml:"powerCapacity" yaml:"powerCapacity"`
	ExtraInfo     null.JSON   `boil:"extra_info" json:"extraInfo,omitempty" toml:"extraInfo" yaml:"extraInfo,omitempty"`
	Remark        null.String `boil:"remark" json:"remark,omitempty" toml:"remark" yaml:"remark,omitempty"`
	CreatedAt     time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedBy     null.Int64  `boil:"created_by" json:"createdBy,omitempty" toml:"createdBy" yaml:"createdBy,omitempty"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedBy     null.Int64  `boil:"updated_by" json:"updatedBy,omitempty" toml:"updatedBy" yaml:"updatedBy,omitempty"`
	DeletedAt     null.Time   `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	DeletedBy     null.Int64  `boil:"deleted_by" json:"deletedBy,omitempty" toml:"deletedBy" yaml:"deletedBy,omitempty"`

	R *deviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceColumns = struct {
	ID            string
	ModbusID      string
	ModuleID      string
	ModelID       string
	GWID          string
	PowerCapacity string
	ExtraInfo     string
	Remark        string
	CreatedAt     string
	CreatedBy     string
	UpdatedAt     string
	UpdatedBy     string
	DeletedAt     string
	DeletedBy     string
}{
	ID:            "id",
	ModbusID:      "modbusid",
	ModuleID:      "module_id",
	ModelID:       "model_id",
	GWID:          "gw_id",
	PowerCapacity: "power_capacity",
	ExtraInfo:     "extra_info",
	Remark:        "remark",
	CreatedAt:     "created_at",
	CreatedBy:     "created_by",
	UpdatedAt:     "updated_at",
	UpdatedBy:     "updated_by",
	DeletedAt:     "deleted_at",
	DeletedBy:     "deleted_by",
}

var DeviceTableColumns = struct {
	ID            string
	ModbusID      string
	ModuleID      string
	ModelID       string
	GWID          string
	PowerCapacity string
	ExtraInfo     string
	Remark        string
	CreatedAt     string
	CreatedBy     string
	UpdatedAt     string
	UpdatedBy     string
	DeletedAt     string
	DeletedBy     string
}{
	ID:            "device.id",
	ModbusID:      "device.modbusid",
	ModuleID:      "device.module_id",
	ModelID:       "device.model_id",
	GWID:          "device.gw_id",
	PowerCapacity: "device.power_capacity",
	ExtraInfo:     "device.extra_info",
	Remark:        "device.remark",
	CreatedAt:     "device.created_at",
	CreatedBy:     "device.created_by",
	UpdatedAt:     "device.updated_at",
	UpdatedBy:     "device.updated_by",
	DeletedAt:     "device.deleted_at",
	DeletedBy:     "device.deleted_by",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DeviceWhere = struct {
	ID            whereHelperint64
	ModbusID      whereHelperint
	ModuleID      whereHelperint64
	ModelID       whereHelperint64
	GWID          whereHelpernull_Int64
	PowerCapacity whereHelperfloat32
	ExtraInfo     whereHelpernull_JSON
	Remark        whereHelpernull_String
	CreatedAt     whereHelpertime_Time
	CreatedBy     whereHelpernull_Int64
	UpdatedAt     whereHelpertime_Time
	UpdatedBy     whereHelpernull_Int64
	DeletedAt     whereHelpernull_Time
	DeletedBy     whereHelpernull_Int64
}{
	ID:            whereHelperint64{field: "`device`.`id`"},
	ModbusID:      whereHelperint{field: "`device`.`modbusid`"},
	ModuleID:      whereHelperint64{field: "`device`.`module_id`"},
	ModelID:       whereHelperint64{field: "`device`.`model_id`"},
	GWID:          whereHelpernull_Int64{field: "`device`.`gw_id`"},
	PowerCapacity: whereHelperfloat32{field: "`device`.`power_capacity`"},
	ExtraInfo:     whereHelpernull_JSON{field: "`device`.`extra_info`"},
	Remark:        whereHelpernull_String{field: "`device`.`remark`"},
	CreatedAt:     whereHelpertime_Time{field: "`device`.`created_at`"},
	CreatedBy:     whereHelpernull_Int64{field: "`device`.`created_by`"},
	UpdatedAt:     whereHelpertime_Time{field: "`device`.`updated_at`"},
	UpdatedBy:     whereHelpernull_Int64{field: "`device`.`updated_by`"},
	DeletedAt:     whereHelpernull_Time{field: "`device`.`deleted_at`"},
	DeletedBy:     whereHelpernull_Int64{field: "`device`.`deleted_by`"},
}

// DeviceRels is where relationship names are stored.
var DeviceRels = struct {
	GW     string
	Model  string
	Module string
}{
	GW:     "GW",
	Model:  "Model",
	Module: "Module",
}

// deviceR is where relationships are stored.
type deviceR struct {
	GW     *Gateway      `boil:"GW" json:"GW" toml:"GW" yaml:"GW"`
	Model  *DeviceModel  `boil:"Model" json:"Model" toml:"Model" yaml:"Model"`
	Module *DeviceModule `boil:"Module" json:"Module" toml:"Module" yaml:"Module"`
}

// NewStruct creates a new relationship struct
func (*deviceR) NewStruct() *deviceR {
	return &deviceR{}
}

func (r *deviceR) GetGW() *Gateway {
	if r == nil {
		return nil
	}
	return r.GW
}

func (r *deviceR) GetModel() *DeviceModel {
	if r == nil {
		return nil
	}
	return r.Model
}

func (r *deviceR) GetModule() *DeviceModule {
	if r == nil {
		return nil
	}
	return r.Module
}

// deviceL is where Load methods for each relationship are stored.
type deviceL struct{}

var (
	deviceAllColumns            = []string{"id", "modbusid", "module_id", "model_id", "gw_id", "power_capacity", "extra_info", "remark", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by"}
	deviceColumnsWithoutDefault = []string{"modbusid", "module_id", "model_id", "gw_id", "power_capacity", "extra_info", "remark", "created_by", "updated_by", "deleted_at", "deleted_by"}
	deviceColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	devicePrimaryKeyColumns     = []string{"id"}
	deviceGeneratedColumns      = []string{}
)

type (
	// DeviceSlice is an alias for a slice of pointers to Device.
	// This should almost always be used instead of []Device.
	DeviceSlice []*Device

	deviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceType                 = reflect.TypeOf(&Device{})
	deviceMapping              = queries.MakeStructMapping(deviceType)
	devicePrimaryKeyMapping, _ = queries.BindMapping(deviceType, deviceMapping, devicePrimaryKeyColumns)
	deviceInsertCacheMut       sync.RWMutex
	deviceInsertCache          = make(map[string]insertCache)
	deviceUpdateCacheMut       sync.RWMutex
	deviceUpdateCache          = make(map[string]updateCache)
	deviceUpsertCacheMut       sync.RWMutex
	deviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single device record from the query.
func (q deviceQuery) One(exec boil.Executor) (*Device, error) {
	o := &Device{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for device")
	}

	return o, nil
}

// All returns all Device records from the query.
func (q deviceQuery) All(exec boil.Executor) (DeviceSlice, error) {
	var o []*Device

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to Device slice")
	}

	return o, nil
}

// Count returns the count of all Device records in the query.
func (q deviceQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count device rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if device exists")
	}

	return count > 0, nil
}

// GW pointed to by the foreign key.
func (o *Device) GW(mods ...qm.QueryMod) gatewayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GWID),
	}

	queryMods = append(queryMods, mods...)

	return Gateways(queryMods...)
}

// Model pointed to by the foreign key.
func (o *Device) Model(mods ...qm.QueryMod) deviceModelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ModelID),
	}

	queryMods = append(queryMods, mods...)

	return DeviceModels(queryMods...)
}

// Module pointed to by the foreign key.
func (o *Device) Module(mods ...qm.QueryMod) deviceModuleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ModuleID),
	}

	queryMods = append(queryMods, mods...)

	return DeviceModules(queryMods...)
}

// LoadGW allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceL) LoadGW(e boil.Executor, singular bool, maybeDevice interface{}, mods queries.Applicator) error {
	var slice []*Device
	var object *Device

	if singular {
		object = maybeDevice.(*Device)
	} else {
		slice = *maybeDevice.(*[]*Device)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceR{}
		}
		if !queries.IsNil(object.GWID) {
			args = append(args, object.GWID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GWID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GWID) {
				args = append(args, obj.GWID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gateway`),
		qm.WhereIn(`gateway.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Gateway")
	}

	var resultSlice []*Gateway
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Gateway")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gateway")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gateway")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GW = foreign
		if foreign.R == nil {
			foreign.R = &gatewayR{}
		}
		foreign.R.GWDevices = append(foreign.R.GWDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GWID, foreign.ID) {
				local.R.GW = foreign
				if foreign.R == nil {
					foreign.R = &gatewayR{}
				}
				foreign.R.GWDevices = append(foreign.R.GWDevices, local)
				break
			}
		}
	}

	return nil
}

// LoadModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceL) LoadModel(e boil.Executor, singular bool, maybeDevice interface{}, mods queries.Applicator) error {
	var slice []*Device
	var object *Device

	if singular {
		object = maybeDevice.(*Device)
	} else {
		slice = *maybeDevice.(*[]*Device)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceR{}
		}
		args = append(args, object.ModelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceR{}
			}

			for _, a := range args {
				if a == obj.ModelID {
					continue Outer
				}
			}

			args = append(args, obj.ModelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`device_model`),
		qm.WhereIn(`device_model.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeviceModel")
	}

	var resultSlice []*DeviceModel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeviceModel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for device_model")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device_model")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Model = foreign
		if foreign.R == nil {
			foreign.R = &deviceModelR{}
		}
		foreign.R.ModelDevices = append(foreign.R.ModelDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModelID == foreign.ID {
				local.R.Model = foreign
				if foreign.R == nil {
					foreign.R = &deviceModelR{}
				}
				foreign.R.ModelDevices = append(foreign.R.ModelDevices, local)
				break
			}
		}
	}

	return nil
}

// LoadModule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceL) LoadModule(e boil.Executor, singular bool, maybeDevice interface{}, mods queries.Applicator) error {
	var slice []*Device
	var object *Device

	if singular {
		object = maybeDevice.(*Device)
	} else {
		slice = *maybeDevice.(*[]*Device)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceR{}
		}
		args = append(args, object.ModuleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceR{}
			}

			for _, a := range args {
				if a == obj.ModuleID {
					continue Outer
				}
			}

			args = append(args, obj.ModuleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`device_module`),
		qm.WhereIn(`device_module.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeviceModule")
	}

	var resultSlice []*DeviceModule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeviceModule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for device_module")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device_module")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Module = foreign
		if foreign.R == nil {
			foreign.R = &deviceModuleR{}
		}
		foreign.R.ModuleDevices = append(foreign.R.ModuleDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModuleID == foreign.ID {
				local.R.Module = foreign
				if foreign.R == nil {
					foreign.R = &deviceModuleR{}
				}
				foreign.R.ModuleDevices = append(foreign.R.ModuleDevices, local)
				break
			}
		}
	}

	return nil
}

// SetGW of the device to the related item.
// Sets o.R.GW to related.
// Adds o to related.R.GWDevices.
func (o *Device) SetGW(exec boil.Executor, insert bool, related *Gateway) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `device` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"gw_id"}),
		strmangle.WhereClause("`", "`", 0, devicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GWID, related.ID)
	if o.R == nil {
		o.R = &deviceR{
			GW: related,
		}
	} else {
		o.R.GW = related
	}

	if related.R == nil {
		related.R = &gatewayR{
			GWDevices: DeviceSlice{o},
		}
	} else {
		related.R.GWDevices = append(related.R.GWDevices, o)
	}

	return nil
}

// RemoveGW relationship.
// Sets o.R.GW to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Device) RemoveGW(exec boil.Executor, related *Gateway) error {
	var err error

	queries.SetScanner(&o.GWID, nil)
	if _, err = o.Update(exec, boil.Whitelist("gw_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.GW = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GWDevices {
		if queries.Equal(o.GWID, ri.GWID) {
			continue
		}

		ln := len(related.R.GWDevices)
		if ln > 1 && i < ln-1 {
			related.R.GWDevices[i] = related.R.GWDevices[ln-1]
		}
		related.R.GWDevices = related.R.GWDevices[:ln-1]
		break
	}
	return nil
}

// SetModel of the device to the related item.
// Sets o.R.Model to related.
// Adds o to related.R.ModelDevices.
func (o *Device) SetModel(exec boil.Executor, insert bool, related *DeviceModel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `device` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"model_id"}),
		strmangle.WhereClause("`", "`", 0, devicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModelID = related.ID
	if o.R == nil {
		o.R = &deviceR{
			Model: related,
		}
	} else {
		o.R.Model = related
	}

	if related.R == nil {
		related.R = &deviceModelR{
			ModelDevices: DeviceSlice{o},
		}
	} else {
		related.R.ModelDevices = append(related.R.ModelDevices, o)
	}

	return nil
}

// SetModule of the device to the related item.
// Sets o.R.Module to related.
// Adds o to related.R.ModuleDevices.
func (o *Device) SetModule(exec boil.Executor, insert bool, related *DeviceModule) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `device` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"module_id"}),
		strmangle.WhereClause("`", "`", 0, devicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModuleID = related.ID
	if o.R == nil {
		o.R = &deviceR{
			Module: related,
		}
	} else {
		o.R.Module = related
	}

	if related.R == nil {
		related.R = &deviceModuleR{
			ModuleDevices: DeviceSlice{o},
		}
	} else {
		related.R.ModuleDevices = append(related.R.ModuleDevices, o)
	}

	return nil
}

// Devices retrieves all the records using an executor.
func Devices(mods ...qm.QueryMod) deviceQuery {
	mods = append(mods, qm.From("`device`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`device`.*"})
	}

	return deviceQuery{q}
}

// FindDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDevice(exec boil.Executor, iD int64, selectCols ...string) (*Device, error) {
	deviceObj := &Device{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `device` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, deviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from device")
	}

	return deviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Device) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no device provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceInsertCacheMut.RLock()
	cache, cached := deviceInsertCache[key]
	deviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceAllColumns,
			deviceColumnsWithDefault,
			deviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceType, deviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceType, deviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `device` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `device` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `device` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, devicePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into device")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == deviceMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for device")
	}

CacheNoHooks:
	if !cached {
		deviceInsertCacheMut.Lock()
		deviceInsertCache[key] = cache
		deviceInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Device.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Device) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	deviceUpdateCacheMut.RLock()
	cache, cached := deviceUpdateCache[key]
	deviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceAllColumns,
			devicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update device, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `device` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, devicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceType, deviceMapping, append(wl, devicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update device row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for device")
	}

	if !cached {
		deviceUpdateCacheMut.Lock()
		deviceUpdateCache[key] = cache
		deviceUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q deviceQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for device")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), devicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `device` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, devicePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in device slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all device")
	}
	return rowsAff, nil
}

var mySQLDeviceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Device) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no device provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(deviceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDeviceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceUpsertCacheMut.RLock()
	cache, cached := deviceUpsertCache[key]
	deviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deviceAllColumns,
			deviceColumnsWithDefault,
			deviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceAllColumns,
			devicePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert device, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`device`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `device` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(deviceType, deviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceType, deviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for device")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == deviceMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(deviceType, deviceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for device")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for device")
	}

CacheNoHooks:
	if !cached {
		deviceUpsertCacheMut.Lock()
		deviceUpsertCache[key] = cache
		deviceUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Device record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Device) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no Device provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), devicePrimaryKeyMapping)
	sql := "DELETE FROM `device` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for device")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no deviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for device")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), devicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `device` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, devicePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from device slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for device")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Device) Reload(exec boil.Executor) error {
	ret, err := FindDevice(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), devicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `device`.* FROM `device` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, devicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in DeviceSlice")
	}

	*o = slice

	return nil
}

// DeviceExists checks if the Device row exists.
func DeviceExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `device` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if device exists")
	}

	return exists, nil
}
