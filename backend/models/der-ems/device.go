// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Device is an object representing the database table.
type Device struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ModbusID  string      `boil:"modbusid" json:"modbusid" toml:"modbusid" yaml:"modbusid"`
	UUEID     string      `boil:"uueid" json:"uueid" toml:"uueid" yaml:"uueid"`
	ModelID   int         `boil:"model_id" json:"modelID" toml:"modelID" yaml:"modelID"`
	GWUUID    string      `boil:"gw_uuid" json:"gwUUID" toml:"gwUUID" yaml:"gwUUID"`
	Remark    null.String `boil:"remark" json:"remark,omitempty" toml:"remark" yaml:"remark,omitempty"`
	Enable    null.Bool   `boil:"enable" json:"enable,omitempty" toml:"enable" yaml:"enable,omitempty"`
	CreatedAt time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`

	R *deviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceColumns = struct {
	ID        string
	ModbusID  string
	UUEID     string
	ModelID   string
	GWUUID    string
	Remark    string
	Enable    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	ModbusID:  "modbusid",
	UUEID:     "uueid",
	ModelID:   "model_id",
	GWUUID:    "gw_uuid",
	Remark:    "remark",
	Enable:    "enable",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var DeviceTableColumns = struct {
	ID        string
	ModbusID  string
	UUEID     string
	ModelID   string
	GWUUID    string
	Remark    string
	Enable    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "device.id",
	ModbusID:  "device.modbusid",
	UUEID:     "device.uueid",
	ModelID:   "device.model_id",
	GWUUID:    "device.gw_uuid",
	Remark:    "device.remark",
	Enable:    "device.enable",
	CreatedAt: "device.created_at",
	UpdatedAt: "device.updated_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DeviceWhere = struct {
	ID        whereHelperint
	ModbusID  whereHelperstring
	UUEID     whereHelperstring
	ModelID   whereHelperint
	GWUUID    whereHelperstring
	Remark    whereHelpernull_String
	Enable    whereHelpernull_Bool
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "`device`.`id`"},
	ModbusID:  whereHelperstring{field: "`device`.`modbusid`"},
	UUEID:     whereHelperstring{field: "`device`.`uueid`"},
	ModelID:   whereHelperint{field: "`device`.`model_id`"},
	GWUUID:    whereHelperstring{field: "`device`.`gw_uuid`"},
	Remark:    whereHelpernull_String{field: "`device`.`remark`"},
	Enable:    whereHelpernull_Bool{field: "`device`.`enable`"},
	CreatedAt: whereHelpertime_Time{field: "`device`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`device`.`updated_at`"},
}

// DeviceRels is where relationship names are stored.
var DeviceRels = struct {
	GW    string
	Model string
}{
	GW:    "GW",
	Model: "Model",
}

// deviceR is where relationships are stored.
type deviceR struct {
	GW    *Gateway     `boil:"GW" json:"GW" toml:"GW" yaml:"GW"`
	Model *DeviceModel `boil:"Model" json:"Model" toml:"Model" yaml:"Model"`
}

// NewStruct creates a new relationship struct
func (*deviceR) NewStruct() *deviceR {
	return &deviceR{}
}

func (r *deviceR) GetGW() *Gateway {
	if r == nil {
		return nil
	}
	return r.GW
}

func (r *deviceR) GetModel() *DeviceModel {
	if r == nil {
		return nil
	}
	return r.Model
}

// deviceL is where Load methods for each relationship are stored.
type deviceL struct{}

var (
	deviceAllColumns            = []string{"id", "modbusid", "uueid", "model_id", "gw_uuid", "remark", "enable", "created_at", "updated_at"}
	deviceColumnsWithoutDefault = []string{"modbusid", "uueid", "model_id", "gw_uuid", "remark", "enable", "updated_at"}
	deviceColumnsWithDefault    = []string{"id", "created_at"}
	devicePrimaryKeyColumns     = []string{"id"}
	deviceGeneratedColumns      = []string{}
)

type (
	// DeviceSlice is an alias for a slice of pointers to Device.
	// This should almost always be used instead of []Device.
	DeviceSlice []*Device

	deviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceType                 = reflect.TypeOf(&Device{})
	deviceMapping              = queries.MakeStructMapping(deviceType)
	devicePrimaryKeyMapping, _ = queries.BindMapping(deviceType, deviceMapping, devicePrimaryKeyColumns)
	deviceInsertCacheMut       sync.RWMutex
	deviceInsertCache          = make(map[string]insertCache)
	deviceUpdateCacheMut       sync.RWMutex
	deviceUpdateCache          = make(map[string]updateCache)
	deviceUpsertCacheMut       sync.RWMutex
	deviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single device record from the query.
func (q deviceQuery) One(exec boil.Executor) (*Device, error) {
	o := &Device{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for device")
	}

	return o, nil
}

// All returns all Device records from the query.
func (q deviceQuery) All(exec boil.Executor) (DeviceSlice, error) {
	var o []*Device

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to Device slice")
	}

	return o, nil
}

// Count returns the count of all Device records in the query.
func (q deviceQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count device rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if device exists")
	}

	return count > 0, nil
}

// GW pointed to by the foreign key.
func (o *Device) GW(mods ...qm.QueryMod) gatewayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`uuid` = ?", o.GWUUID),
	}

	queryMods = append(queryMods, mods...)

	return Gateways(queryMods...)
}

// Model pointed to by the foreign key.
func (o *Device) Model(mods ...qm.QueryMod) deviceModelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ModelID),
	}

	queryMods = append(queryMods, mods...)

	return DeviceModels(queryMods...)
}

// LoadGW allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceL) LoadGW(e boil.Executor, singular bool, maybeDevice interface{}, mods queries.Applicator) error {
	var slice []*Device
	var object *Device

	if singular {
		object = maybeDevice.(*Device)
	} else {
		slice = *maybeDevice.(*[]*Device)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceR{}
		}
		args = append(args, object.GWUUID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceR{}
			}

			for _, a := range args {
				if a == obj.GWUUID {
					continue Outer
				}
			}

			args = append(args, obj.GWUUID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gateway`),
		qm.WhereIn(`gateway.uuid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Gateway")
	}

	var resultSlice []*Gateway
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Gateway")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gateway")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gateway")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GW = foreign
		if foreign.R == nil {
			foreign.R = &gatewayR{}
		}
		foreign.R.GWDevices = append(foreign.R.GWDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GWUUID == foreign.UUID {
				local.R.GW = foreign
				if foreign.R == nil {
					foreign.R = &gatewayR{}
				}
				foreign.R.GWDevices = append(foreign.R.GWDevices, local)
				break
			}
		}
	}

	return nil
}

// LoadModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deviceL) LoadModel(e boil.Executor, singular bool, maybeDevice interface{}, mods queries.Applicator) error {
	var slice []*Device
	var object *Device

	if singular {
		object = maybeDevice.(*Device)
	} else {
		slice = *maybeDevice.(*[]*Device)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceR{}
		}
		args = append(args, object.ModelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceR{}
			}

			for _, a := range args {
				if a == obj.ModelID {
					continue Outer
				}
			}

			args = append(args, obj.ModelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`device_model`),
		qm.WhereIn(`device_model.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeviceModel")
	}

	var resultSlice []*DeviceModel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeviceModel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for device_model")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device_model")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Model = foreign
		if foreign.R == nil {
			foreign.R = &deviceModelR{}
		}
		foreign.R.ModelDevices = append(foreign.R.ModelDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModelID == foreign.ID {
				local.R.Model = foreign
				if foreign.R == nil {
					foreign.R = &deviceModelR{}
				}
				foreign.R.ModelDevices = append(foreign.R.ModelDevices, local)
				break
			}
		}
	}

	return nil
}

// SetGW of the device to the related item.
// Sets o.R.GW to related.
// Adds o to related.R.GWDevices.
func (o *Device) SetGW(exec boil.Executor, insert bool, related *Gateway) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `device` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"gw_uuid"}),
		strmangle.WhereClause("`", "`", 0, devicePrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GWUUID = related.UUID
	if o.R == nil {
		o.R = &deviceR{
			GW: related,
		}
	} else {
		o.R.GW = related
	}

	if related.R == nil {
		related.R = &gatewayR{
			GWDevices: DeviceSlice{o},
		}
	} else {
		related.R.GWDevices = append(related.R.GWDevices, o)
	}

	return nil
}

// SetModel of the device to the related item.
// Sets o.R.Model to related.
// Adds o to related.R.ModelDevices.
func (o *Device) SetModel(exec boil.Executor, insert bool, related *DeviceModel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `device` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"model_id"}),
		strmangle.WhereClause("`", "`", 0, devicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModelID = related.ID
	if o.R == nil {
		o.R = &deviceR{
			Model: related,
		}
	} else {
		o.R.Model = related
	}

	if related.R == nil {
		related.R = &deviceModelR{
			ModelDevices: DeviceSlice{o},
		}
	} else {
		related.R.ModelDevices = append(related.R.ModelDevices, o)
	}

	return nil
}

// Devices retrieves all the records using an executor.
func Devices(mods ...qm.QueryMod) deviceQuery {
	mods = append(mods, qm.From("`device`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`device`.*"})
	}

	return deviceQuery{q}
}

// FindDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDevice(exec boil.Executor, iD int, selectCols ...string) (*Device, error) {
	deviceObj := &Device{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `device` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, deviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from device")
	}

	return deviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Device) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no device provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceInsertCacheMut.RLock()
	cache, cached := deviceInsertCache[key]
	deviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceAllColumns,
			deviceColumnsWithDefault,
			deviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceType, deviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceType, deviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `device` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `device` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `device` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, devicePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into device")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == deviceMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for device")
	}

CacheNoHooks:
	if !cached {
		deviceInsertCacheMut.Lock()
		deviceInsertCache[key] = cache
		deviceInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Device.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Device) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	key := makeCacheKey(columns, nil)
	deviceUpdateCacheMut.RLock()
	cache, cached := deviceUpdateCache[key]
	deviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceAllColumns,
			devicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update device, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `device` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, devicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceType, deviceMapping, append(wl, devicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update device row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for device")
	}

	if !cached {
		deviceUpdateCacheMut.Lock()
		deviceUpdateCache[key] = cache
		deviceUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q deviceQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for device")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), devicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `device` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, devicePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in device slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all device")
	}
	return rowsAff, nil
}

var mySQLDeviceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Device) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no device provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	nzDefaults := queries.NonZeroDefaultSet(deviceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDeviceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceUpsertCacheMut.RLock()
	cache, cached := deviceUpsertCache[key]
	deviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deviceAllColumns,
			deviceColumnsWithDefault,
			deviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceAllColumns,
			devicePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert device, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`device`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `device` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(deviceType, deviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceType, deviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for device")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == deviceMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(deviceType, deviceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for device")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for device")
	}

CacheNoHooks:
	if !cached {
		deviceUpsertCacheMut.Lock()
		deviceUpsertCache[key] = cache
		deviceUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Device record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Device) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no Device provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), devicePrimaryKeyMapping)
	sql := "DELETE FROM `device` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for device")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no deviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from device")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for device")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), devicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `device` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, devicePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from device slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for device")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Device) Reload(exec boil.Executor) error {
	ret, err := FindDevice(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), devicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `device`.* FROM `device` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, devicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in DeviceSlice")
	}

	*o = slice

	return nil
}

// DeviceExists checks if the Device row exists.
func DeviceExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `device` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if device exists")
	}

	return exists, nil
}
