// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeviceLog is an object representing the database table.
type DeviceLog struct {
	ID              int64        `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceID        null.Int64   `boil:"device_id" json:"deviceID,omitempty" toml:"deviceID" yaml:"deviceID,omitempty"`
	Modbusid        null.Int     `boil:"modbusid" json:"modbusid,omitempty" toml:"modbusid" yaml:"modbusid,omitempty"`
	ModuleID        null.Int64   `boil:"module_id" json:"moduleID,omitempty" toml:"moduleID" yaml:"moduleID,omitempty"`
	ModelID         null.Int64   `boil:"model_id" json:"modelID,omitempty" toml:"modelID" yaml:"modelID,omitempty"`
	GWID            null.Int64   `boil:"gw_id" json:"gwID,omitempty" toml:"gwID" yaml:"gwID,omitempty"`
	PowerCapacity   null.Float32 `boil:"power_capacity" json:"powerCapacity,omitempty" toml:"powerCapacity" yaml:"powerCapacity,omitempty"`
	ExtraInfo       null.JSON    `boil:"extra_info" json:"extraInfo,omitempty" toml:"extraInfo" yaml:"extraInfo,omitempty"`
	Remark          null.String  `boil:"remark" json:"remark,omitempty" toml:"remark" yaml:"remark,omitempty"`
	DeviceUpdatedAt null.Time    `boil:"device_updated_at" json:"deviceUpdatedAt,omitempty" toml:"deviceUpdatedAt" yaml:"deviceUpdatedAt,omitempty"`
	DeviceUpdatedBy null.Int64   `boil:"device_updated_by" json:"deviceUpdatedBy,omitempty" toml:"deviceUpdatedBy" yaml:"deviceUpdatedBy,omitempty"`
	DeviceDeletedAt null.Time    `boil:"device_deleted_at" json:"deviceDeletedAt,omitempty" toml:"deviceDeletedAt" yaml:"deviceDeletedAt,omitempty"`
	DeviceDeletedBy null.Int64   `boil:"device_deleted_by" json:"deviceDeletedBy,omitempty" toml:"deviceDeletedBy" yaml:"deviceDeletedBy,omitempty"`
	CreatedAt       time.Time    `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *deviceLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceLogColumns = struct {
	ID              string
	DeviceID        string
	Modbusid        string
	ModuleID        string
	ModelID         string
	GWID            string
	PowerCapacity   string
	ExtraInfo       string
	Remark          string
	DeviceUpdatedAt string
	DeviceUpdatedBy string
	DeviceDeletedAt string
	DeviceDeletedBy string
	CreatedAt       string
}{
	ID:              "id",
	DeviceID:        "device_id",
	Modbusid:        "modbusid",
	ModuleID:        "module_id",
	ModelID:         "model_id",
	GWID:            "gw_id",
	PowerCapacity:   "power_capacity",
	ExtraInfo:       "extra_info",
	Remark:          "remark",
	DeviceUpdatedAt: "device_updated_at",
	DeviceUpdatedBy: "device_updated_by",
	DeviceDeletedAt: "device_deleted_at",
	DeviceDeletedBy: "device_deleted_by",
	CreatedAt:       "created_at",
}

var DeviceLogTableColumns = struct {
	ID              string
	DeviceID        string
	Modbusid        string
	ModuleID        string
	ModelID         string
	GWID            string
	PowerCapacity   string
	ExtraInfo       string
	Remark          string
	DeviceUpdatedAt string
	DeviceUpdatedBy string
	DeviceDeletedAt string
	DeviceDeletedBy string
	CreatedAt       string
}{
	ID:              "device_log.id",
	DeviceID:        "device_log.device_id",
	Modbusid:        "device_log.modbusid",
	ModuleID:        "device_log.module_id",
	ModelID:         "device_log.model_id",
	GWID:            "device_log.gw_id",
	PowerCapacity:   "device_log.power_capacity",
	ExtraInfo:       "device_log.extra_info",
	Remark:          "device_log.remark",
	DeviceUpdatedAt: "device_log.device_updated_at",
	DeviceUpdatedBy: "device_log.device_updated_by",
	DeviceDeletedAt: "device_log.device_deleted_at",
	DeviceDeletedBy: "device_log.device_deleted_by",
	CreatedAt:       "device_log.created_at",
}

// Generated where

var DeviceLogWhere = struct {
	ID              whereHelperint64
	DeviceID        whereHelpernull_Int64
	Modbusid        whereHelpernull_Int
	ModuleID        whereHelpernull_Int64
	ModelID         whereHelpernull_Int64
	GWID            whereHelpernull_Int64
	PowerCapacity   whereHelpernull_Float32
	ExtraInfo       whereHelpernull_JSON
	Remark          whereHelpernull_String
	DeviceUpdatedAt whereHelpernull_Time
	DeviceUpdatedBy whereHelpernull_Int64
	DeviceDeletedAt whereHelpernull_Time
	DeviceDeletedBy whereHelpernull_Int64
	CreatedAt       whereHelpertime_Time
}{
	ID:              whereHelperint64{field: "`device_log`.`id`"},
	DeviceID:        whereHelpernull_Int64{field: "`device_log`.`device_id`"},
	Modbusid:        whereHelpernull_Int{field: "`device_log`.`modbusid`"},
	ModuleID:        whereHelpernull_Int64{field: "`device_log`.`module_id`"},
	ModelID:         whereHelpernull_Int64{field: "`device_log`.`model_id`"},
	GWID:            whereHelpernull_Int64{field: "`device_log`.`gw_id`"},
	PowerCapacity:   whereHelpernull_Float32{field: "`device_log`.`power_capacity`"},
	ExtraInfo:       whereHelpernull_JSON{field: "`device_log`.`extra_info`"},
	Remark:          whereHelpernull_String{field: "`device_log`.`remark`"},
	DeviceUpdatedAt: whereHelpernull_Time{field: "`device_log`.`device_updated_at`"},
	DeviceUpdatedBy: whereHelpernull_Int64{field: "`device_log`.`device_updated_by`"},
	DeviceDeletedAt: whereHelpernull_Time{field: "`device_log`.`device_deleted_at`"},
	DeviceDeletedBy: whereHelpernull_Int64{field: "`device_log`.`device_deleted_by`"},
	CreatedAt:       whereHelpertime_Time{field: "`device_log`.`created_at`"},
}

// DeviceLogRels is where relationship names are stored.
var DeviceLogRels = struct {
}{}

// deviceLogR is where relationships are stored.
type deviceLogR struct {
}

// NewStruct creates a new relationship struct
func (*deviceLogR) NewStruct() *deviceLogR {
	return &deviceLogR{}
}

// deviceLogL is where Load methods for each relationship are stored.
type deviceLogL struct{}

var (
	deviceLogAllColumns            = []string{"id", "device_id", "modbusid", "module_id", "model_id", "gw_id", "power_capacity", "extra_info", "remark", "device_updated_at", "device_updated_by", "device_deleted_at", "device_deleted_by", "created_at"}
	deviceLogColumnsWithoutDefault = []string{"device_id", "modbusid", "module_id", "model_id", "gw_id", "power_capacity", "extra_info", "remark", "device_updated_at", "device_updated_by", "device_deleted_at", "device_deleted_by"}
	deviceLogColumnsWithDefault    = []string{"id", "created_at"}
	deviceLogPrimaryKeyColumns     = []string{"id"}
	deviceLogGeneratedColumns      = []string{}
)

type (
	// DeviceLogSlice is an alias for a slice of pointers to DeviceLog.
	// This should almost always be used instead of []DeviceLog.
	DeviceLogSlice []*DeviceLog

	deviceLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceLogType                 = reflect.TypeOf(&DeviceLog{})
	deviceLogMapping              = queries.MakeStructMapping(deviceLogType)
	deviceLogPrimaryKeyMapping, _ = queries.BindMapping(deviceLogType, deviceLogMapping, deviceLogPrimaryKeyColumns)
	deviceLogInsertCacheMut       sync.RWMutex
	deviceLogInsertCache          = make(map[string]insertCache)
	deviceLogUpdateCacheMut       sync.RWMutex
	deviceLogUpdateCache          = make(map[string]updateCache)
	deviceLogUpsertCacheMut       sync.RWMutex
	deviceLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single deviceLog record from the query.
func (q deviceLogQuery) One(exec boil.Executor) (*DeviceLog, error) {
	o := &DeviceLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for device_log")
	}

	return o, nil
}

// All returns all DeviceLog records from the query.
func (q deviceLogQuery) All(exec boil.Executor) (DeviceLogSlice, error) {
	var o []*DeviceLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to DeviceLog slice")
	}

	return o, nil
}

// Count returns the count of all DeviceLog records in the query.
func (q deviceLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count device_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if device_log exists")
	}

	return count > 0, nil
}

// DeviceLogs retrieves all the records using an executor.
func DeviceLogs(mods ...qm.QueryMod) deviceLogQuery {
	mods = append(mods, qm.From("`device_log`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`device_log`.*"})
	}

	return deviceLogQuery{q}
}

// FindDeviceLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeviceLog(exec boil.Executor, iD int64, selectCols ...string) (*DeviceLog, error) {
	deviceLogObj := &DeviceLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `device_log` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, deviceLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from device_log")
	}

	return deviceLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeviceLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no device_log provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceLogInsertCacheMut.RLock()
	cache, cached := deviceLogInsertCache[key]
	deviceLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceLogAllColumns,
			deviceLogColumnsWithDefault,
			deviceLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceLogType, deviceLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceLogType, deviceLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `device_log` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `device_log` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `device_log` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, deviceLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into device_log")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == deviceLogMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for device_log")
	}

CacheNoHooks:
	if !cached {
		deviceLogInsertCacheMut.Lock()
		deviceLogInsertCache[key] = cache
		deviceLogInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DeviceLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeviceLog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	deviceLogUpdateCacheMut.RLock()
	cache, cached := deviceLogUpdateCache[key]
	deviceLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceLogAllColumns,
			deviceLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update device_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `device_log` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, deviceLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceLogType, deviceLogMapping, append(wl, deviceLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update device_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for device_log")
	}

	if !cached {
		deviceLogUpdateCacheMut.Lock()
		deviceLogUpdateCache[key] = cache
		deviceLogUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q deviceLogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for device_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for device_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceLogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `device_log` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deviceLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in deviceLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all deviceLog")
	}
	return rowsAff, nil
}

var mySQLDeviceLogUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeviceLog) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no device_log provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceLogColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDeviceLogUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceLogUpsertCacheMut.RLock()
	cache, cached := deviceLogUpsertCache[key]
	deviceLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deviceLogAllColumns,
			deviceLogColumnsWithDefault,
			deviceLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceLogAllColumns,
			deviceLogPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert device_log, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`device_log`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `device_log` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(deviceLogType, deviceLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceLogType, deviceLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for device_log")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == deviceLogMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(deviceLogType, deviceLogMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for device_log")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for device_log")
	}

CacheNoHooks:
	if !cached {
		deviceLogUpsertCacheMut.Lock()
		deviceLogUpsertCache[key] = cache
		deviceLogUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DeviceLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeviceLog) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no DeviceLog provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deviceLogPrimaryKeyMapping)
	sql := "DELETE FROM `device_log` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from device_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for device_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceLogQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no deviceLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from device_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for device_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceLogSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `device_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deviceLogPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from deviceLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for device_log")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeviceLog) Reload(exec boil.Executor) error {
	ret, err := FindDeviceLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `device_log`.* FROM `device_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deviceLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in DeviceLogSlice")
	}

	*o = slice

	return nil
}

// DeviceLogExists checks if the DeviceLog row exists.
func DeviceLogExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `device_log` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if device_log exists")
	}

	return exists, nil
}
