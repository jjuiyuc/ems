// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeviceModel is an object representing the database table.
type DeviceModel struct {
	ID         int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceType null.String `boil:"device_type" json:"deviceType,omitempty" toml:"deviceType" yaml:"deviceType,omitempty"`
	ModelName  null.String `boil:"model_name" json:"modelName,omitempty" toml:"modelName" yaml:"modelName,omitempty"`
	Capacity   null.String `boil:"capacity" json:"capacity,omitempty" toml:"capacity" yaml:"capacity,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`

	R *deviceModelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deviceModelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeviceModelColumns = struct {
	ID         string
	DeviceType string
	ModelName  string
	Capacity   string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	DeviceType: "device_type",
	ModelName:  "model_name",
	Capacity:   "capacity",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var DeviceModelTableColumns = struct {
	ID         string
	DeviceType string
	ModelName  string
	Capacity   string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "device_model.id",
	DeviceType: "device_model.device_type",
	ModelName:  "device_model.model_name",
	Capacity:   "device_model.capacity",
	CreatedAt:  "device_model.created_at",
	UpdatedAt:  "device_model.updated_at",
}

// Generated where

var DeviceModelWhere = struct {
	ID         whereHelperint
	DeviceType whereHelpernull_String
	ModelName  whereHelpernull_String
	Capacity   whereHelpernull_String
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpernull_Time
}{
	ID:         whereHelperint{field: "`device_model`.`id`"},
	DeviceType: whereHelpernull_String{field: "`device_model`.`device_type`"},
	ModelName:  whereHelpernull_String{field: "`device_model`.`model_name`"},
	Capacity:   whereHelpernull_String{field: "`device_model`.`capacity`"},
	CreatedAt:  whereHelpertime_Time{field: "`device_model`.`created_at`"},
	UpdatedAt:  whereHelpernull_Time{field: "`device_model`.`updated_at`"},
}

// DeviceModelRels is where relationship names are stored.
var DeviceModelRels = struct {
	ModelDevices string
}{
	ModelDevices: "ModelDevices",
}

// deviceModelR is where relationships are stored.
type deviceModelR struct {
	ModelDevices DeviceSlice `boil:"ModelDevices" json:"ModelDevices" toml:"ModelDevices" yaml:"ModelDevices"`
}

// NewStruct creates a new relationship struct
func (*deviceModelR) NewStruct() *deviceModelR {
	return &deviceModelR{}
}

func (r *deviceModelR) GetModelDevices() DeviceSlice {
	if r == nil {
		return nil
	}
	return r.ModelDevices
}

// deviceModelL is where Load methods for each relationship are stored.
type deviceModelL struct{}

var (
	deviceModelAllColumns            = []string{"id", "device_type", "model_name", "capacity", "created_at", "updated_at"}
	deviceModelColumnsWithoutDefault = []string{"device_type", "model_name", "capacity", "updated_at"}
	deviceModelColumnsWithDefault    = []string{"id", "created_at"}
	deviceModelPrimaryKeyColumns     = []string{"id"}
	deviceModelGeneratedColumns      = []string{}
)

type (
	// DeviceModelSlice is an alias for a slice of pointers to DeviceModel.
	// This should almost always be used instead of []DeviceModel.
	DeviceModelSlice []*DeviceModel

	deviceModelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deviceModelType                 = reflect.TypeOf(&DeviceModel{})
	deviceModelMapping              = queries.MakeStructMapping(deviceModelType)
	deviceModelPrimaryKeyMapping, _ = queries.BindMapping(deviceModelType, deviceModelMapping, deviceModelPrimaryKeyColumns)
	deviceModelInsertCacheMut       sync.RWMutex
	deviceModelInsertCache          = make(map[string]insertCache)
	deviceModelUpdateCacheMut       sync.RWMutex
	deviceModelUpdateCache          = make(map[string]updateCache)
	deviceModelUpsertCacheMut       sync.RWMutex
	deviceModelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single deviceModel record from the query.
func (q deviceModelQuery) One(exec boil.Executor) (*DeviceModel, error) {
	o := &DeviceModel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for device_model")
	}

	return o, nil
}

// All returns all DeviceModel records from the query.
func (q deviceModelQuery) All(exec boil.Executor) (DeviceModelSlice, error) {
	var o []*DeviceModel

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to DeviceModel slice")
	}

	return o, nil
}

// Count returns the count of all DeviceModel records in the query.
func (q deviceModelQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count device_model rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deviceModelQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if device_model exists")
	}

	return count > 0, nil
}

// ModelDevices retrieves all the device's Devices with an executor via model_id column.
func (o *DeviceModel) ModelDevices(mods ...qm.QueryMod) deviceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`device`.`model_id`=?", o.ID),
	)

	return Devices(queryMods...)
}

// LoadModelDevices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (deviceModelL) LoadModelDevices(e boil.Executor, singular bool, maybeDeviceModel interface{}, mods queries.Applicator) error {
	var slice []*DeviceModel
	var object *DeviceModel

	if singular {
		object = maybeDeviceModel.(*DeviceModel)
	} else {
		slice = *maybeDeviceModel.(*[]*DeviceModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deviceModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deviceModelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`device`),
		qm.WhereIn(`device.model_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load device")
	}

	var resultSlice []*Device
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice device")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on device")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for device")
	}

	if singular {
		object.R.ModelDevices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deviceR{}
			}
			foreign.R.Model = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ModelID {
				local.R.ModelDevices = append(local.R.ModelDevices, foreign)
				if foreign.R == nil {
					foreign.R = &deviceR{}
				}
				foreign.R.Model = local
				break
			}
		}
	}

	return nil
}

// AddModelDevices adds the given related objects to the existing relationships
// of the device_model, optionally inserting them as new records.
// Appends related to o.R.ModelDevices.
// Sets related.R.Model appropriately.
func (o *DeviceModel) AddModelDevices(exec boil.Executor, insert bool, related ...*Device) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ModelID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `device` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"model_id"}),
				strmangle.WhereClause("`", "`", 0, devicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ModelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &deviceModelR{
			ModelDevices: related,
		}
	} else {
		o.R.ModelDevices = append(o.R.ModelDevices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deviceR{
				Model: o,
			}
		} else {
			rel.R.Model = o
		}
	}
	return nil
}

// DeviceModels retrieves all the records using an executor.
func DeviceModels(mods ...qm.QueryMod) deviceModelQuery {
	mods = append(mods, qm.From("`device_model`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`device_model`.*"})
	}

	return deviceModelQuery{q}
}

// FindDeviceModel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeviceModel(exec boil.Executor, iD int, selectCols ...string) (*DeviceModel, error) {
	deviceModelObj := &DeviceModel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `device_model` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, deviceModelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from device_model")
	}

	return deviceModelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeviceModel) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no device_model provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(deviceModelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deviceModelInsertCacheMut.RLock()
	cache, cached := deviceModelInsertCache[key]
	deviceModelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deviceModelAllColumns,
			deviceModelColumnsWithDefault,
			deviceModelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deviceModelType, deviceModelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deviceModelType, deviceModelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `device_model` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `device_model` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `device_model` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, deviceModelPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into device_model")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == deviceModelMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for device_model")
	}

CacheNoHooks:
	if !cached {
		deviceModelInsertCacheMut.Lock()
		deviceModelInsertCache[key] = cache
		deviceModelInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DeviceModel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeviceModel) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	key := makeCacheKey(columns, nil)
	deviceModelUpdateCacheMut.RLock()
	cache, cached := deviceModelUpdateCache[key]
	deviceModelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deviceModelAllColumns,
			deviceModelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update device_model, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `device_model` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, deviceModelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deviceModelType, deviceModelMapping, append(wl, deviceModelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update device_model row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for device_model")
	}

	if !cached {
		deviceModelUpdateCacheMut.Lock()
		deviceModelUpdateCache[key] = cache
		deviceModelUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q deviceModelQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for device_model")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for device_model")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeviceModelSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `device_model` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deviceModelPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in deviceModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all deviceModel")
	}
	return rowsAff, nil
}

var mySQLDeviceModelUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeviceModel) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no device_model provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	nzDefaults := queries.NonZeroDefaultSet(deviceModelColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDeviceModelUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deviceModelUpsertCacheMut.RLock()
	cache, cached := deviceModelUpsertCache[key]
	deviceModelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deviceModelAllColumns,
			deviceModelColumnsWithDefault,
			deviceModelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deviceModelAllColumns,
			deviceModelPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert device_model, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`device_model`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `device_model` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(deviceModelType, deviceModelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deviceModelType, deviceModelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for device_model")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == deviceModelMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(deviceModelType, deviceModelMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for device_model")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for device_model")
	}

CacheNoHooks:
	if !cached {
		deviceModelUpsertCacheMut.Lock()
		deviceModelUpsertCache[key] = cache
		deviceModelUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DeviceModel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeviceModel) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no DeviceModel provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deviceModelPrimaryKeyMapping)
	sql := "DELETE FROM `device_model` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from device_model")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for device_model")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deviceModelQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no deviceModelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from device_model")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for device_model")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeviceModelSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `device_model` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deviceModelPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from deviceModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for device_model")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeviceModel) Reload(exec boil.Executor) error {
	ret, err := FindDeviceModel(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeviceModelSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeviceModelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deviceModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `device_model`.* FROM `device_model` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deviceModelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in DeviceModelSlice")
	}

	*o = slice

	return nil
}

// DeviceModelExists checks if the DeviceModel row exists.
func DeviceModelExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `device_model` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if device_model exists")
	}

	return exists, nil
}
