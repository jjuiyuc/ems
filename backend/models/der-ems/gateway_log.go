// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GatewayLog is an object representing the database table.
type GatewayLog struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	GWID        null.Int64  `boil:"gw_id" json:"gwID,omitempty" toml:"gwID" yaml:"gwID,omitempty"`
	UUID        null.String `boil:"uuid" json:"uuid,omitempty" toml:"uuid" yaml:"uuid,omitempty"`
	LocationID  null.Int64  `boil:"location_id" json:"locationID,omitempty" toml:"locationID" yaml:"locationID,omitempty"`
	Enable      null.Bool   `boil:"enable" json:"enable,omitempty" toml:"enable" yaml:"enable,omitempty"`
	Remark      null.String `boil:"remark" json:"remark,omitempty" toml:"remark" yaml:"remark,omitempty"`
	GWUpdatedAt null.Time   `boil:"gw_updated_at" json:"gwUpdatedAt,omitempty" toml:"gwUpdatedAt" yaml:"gwUpdatedAt,omitempty"`
	GWUpdatedBy null.Int64  `boil:"gw_updated_by" json:"gwUpdatedBy,omitempty" toml:"gwUpdatedBy" yaml:"gwUpdatedBy,omitempty"`
	GWDeletedAt null.Time   `boil:"gw_deleted_at" json:"gwDeletedAt,omitempty" toml:"gwDeletedAt" yaml:"gwDeletedAt,omitempty"`
	GWDeletedBy null.Int64  `boil:"gw_deleted_by" json:"gwDeletedBy,omitempty" toml:"gwDeletedBy" yaml:"gwDeletedBy,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *gatewayLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gatewayLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GatewayLogColumns = struct {
	ID          string
	GWID        string
	UUID        string
	LocationID  string
	Enable      string
	Remark      string
	GWUpdatedAt string
	GWUpdatedBy string
	GWDeletedAt string
	GWDeletedBy string
	CreatedAt   string
}{
	ID:          "id",
	GWID:        "gw_id",
	UUID:        "uuid",
	LocationID:  "location_id",
	Enable:      "enable",
	Remark:      "remark",
	GWUpdatedAt: "gw_updated_at",
	GWUpdatedBy: "gw_updated_by",
	GWDeletedAt: "gw_deleted_at",
	GWDeletedBy: "gw_deleted_by",
	CreatedAt:   "created_at",
}

var GatewayLogTableColumns = struct {
	ID          string
	GWID        string
	UUID        string
	LocationID  string
	Enable      string
	Remark      string
	GWUpdatedAt string
	GWUpdatedBy string
	GWDeletedAt string
	GWDeletedBy string
	CreatedAt   string
}{
	ID:          "gateway_log.id",
	GWID:        "gateway_log.gw_id",
	UUID:        "gateway_log.uuid",
	LocationID:  "gateway_log.location_id",
	Enable:      "gateway_log.enable",
	Remark:      "gateway_log.remark",
	GWUpdatedAt: "gateway_log.gw_updated_at",
	GWUpdatedBy: "gateway_log.gw_updated_by",
	GWDeletedAt: "gateway_log.gw_deleted_at",
	GWDeletedBy: "gateway_log.gw_deleted_by",
	CreatedAt:   "gateway_log.created_at",
}

// Generated where

var GatewayLogWhere = struct {
	ID          whereHelperint64
	GWID        whereHelpernull_Int64
	UUID        whereHelpernull_String
	LocationID  whereHelpernull_Int64
	Enable      whereHelpernull_Bool
	Remark      whereHelpernull_String
	GWUpdatedAt whereHelpernull_Time
	GWUpdatedBy whereHelpernull_Int64
	GWDeletedAt whereHelpernull_Time
	GWDeletedBy whereHelpernull_Int64
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "`gateway_log`.`id`"},
	GWID:        whereHelpernull_Int64{field: "`gateway_log`.`gw_id`"},
	UUID:        whereHelpernull_String{field: "`gateway_log`.`uuid`"},
	LocationID:  whereHelpernull_Int64{field: "`gateway_log`.`location_id`"},
	Enable:      whereHelpernull_Bool{field: "`gateway_log`.`enable`"},
	Remark:      whereHelpernull_String{field: "`gateway_log`.`remark`"},
	GWUpdatedAt: whereHelpernull_Time{field: "`gateway_log`.`gw_updated_at`"},
	GWUpdatedBy: whereHelpernull_Int64{field: "`gateway_log`.`gw_updated_by`"},
	GWDeletedAt: whereHelpernull_Time{field: "`gateway_log`.`gw_deleted_at`"},
	GWDeletedBy: whereHelpernull_Int64{field: "`gateway_log`.`gw_deleted_by`"},
	CreatedAt:   whereHelpertime_Time{field: "`gateway_log`.`created_at`"},
}

// GatewayLogRels is where relationship names are stored.
var GatewayLogRels = struct {
}{}

// gatewayLogR is where relationships are stored.
type gatewayLogR struct {
}

// NewStruct creates a new relationship struct
func (*gatewayLogR) NewStruct() *gatewayLogR {
	return &gatewayLogR{}
}

// gatewayLogL is where Load methods for each relationship are stored.
type gatewayLogL struct{}

var (
	gatewayLogAllColumns            = []string{"id", "gw_id", "uuid", "location_id", "enable", "remark", "gw_updated_at", "gw_updated_by", "gw_deleted_at", "gw_deleted_by", "created_at"}
	gatewayLogColumnsWithoutDefault = []string{"gw_id", "uuid", "location_id", "enable", "remark", "gw_updated_at", "gw_updated_by", "gw_deleted_at", "gw_deleted_by"}
	gatewayLogColumnsWithDefault    = []string{"id", "created_at"}
	gatewayLogPrimaryKeyColumns     = []string{"id"}
	gatewayLogGeneratedColumns      = []string{}
)

type (
	// GatewayLogSlice is an alias for a slice of pointers to GatewayLog.
	// This should almost always be used instead of []GatewayLog.
	GatewayLogSlice []*GatewayLog

	gatewayLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gatewayLogType                 = reflect.TypeOf(&GatewayLog{})
	gatewayLogMapping              = queries.MakeStructMapping(gatewayLogType)
	gatewayLogPrimaryKeyMapping, _ = queries.BindMapping(gatewayLogType, gatewayLogMapping, gatewayLogPrimaryKeyColumns)
	gatewayLogInsertCacheMut       sync.RWMutex
	gatewayLogInsertCache          = make(map[string]insertCache)
	gatewayLogUpdateCacheMut       sync.RWMutex
	gatewayLogUpdateCache          = make(map[string]updateCache)
	gatewayLogUpsertCacheMut       sync.RWMutex
	gatewayLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single gatewayLog record from the query.
func (q gatewayLogQuery) One(exec boil.Executor) (*GatewayLog, error) {
	o := &GatewayLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for gateway_log")
	}

	return o, nil
}

// All returns all GatewayLog records from the query.
func (q gatewayLogQuery) All(exec boil.Executor) (GatewayLogSlice, error) {
	var o []*GatewayLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to GatewayLog slice")
	}

	return o, nil
}

// Count returns the count of all GatewayLog records in the query.
func (q gatewayLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count gateway_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gatewayLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if gateway_log exists")
	}

	return count > 0, nil
}

// GatewayLogs retrieves all the records using an executor.
func GatewayLogs(mods ...qm.QueryMod) gatewayLogQuery {
	mods = append(mods, qm.From("`gateway_log`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`gateway_log`.*"})
	}

	return gatewayLogQuery{q}
}

// FindGatewayLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGatewayLog(exec boil.Executor, iD int64, selectCols ...string) (*GatewayLog, error) {
	gatewayLogObj := &GatewayLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `gateway_log` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, gatewayLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from gateway_log")
	}

	return gatewayLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GatewayLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no gateway_log provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(gatewayLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gatewayLogInsertCacheMut.RLock()
	cache, cached := gatewayLogInsertCache[key]
	gatewayLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gatewayLogAllColumns,
			gatewayLogColumnsWithDefault,
			gatewayLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gatewayLogType, gatewayLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gatewayLogType, gatewayLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `gateway_log` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `gateway_log` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `gateway_log` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, gatewayLogPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into gateway_log")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == gatewayLogMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for gateway_log")
	}

CacheNoHooks:
	if !cached {
		gatewayLogInsertCacheMut.Lock()
		gatewayLogInsertCache[key] = cache
		gatewayLogInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GatewayLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GatewayLog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	gatewayLogUpdateCacheMut.RLock()
	cache, cached := gatewayLogUpdateCache[key]
	gatewayLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gatewayLogAllColumns,
			gatewayLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update gateway_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `gateway_log` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, gatewayLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gatewayLogType, gatewayLogMapping, append(wl, gatewayLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update gateway_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for gateway_log")
	}

	if !cached {
		gatewayLogUpdateCacheMut.Lock()
		gatewayLogUpdateCache[key] = cache
		gatewayLogUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q gatewayLogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for gateway_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for gateway_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GatewayLogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gatewayLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `gateway_log` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gatewayLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in gatewayLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all gatewayLog")
	}
	return rowsAff, nil
}

var mySQLGatewayLogUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GatewayLog) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no gateway_log provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(gatewayLogColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGatewayLogUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gatewayLogUpsertCacheMut.RLock()
	cache, cached := gatewayLogUpsertCache[key]
	gatewayLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			gatewayLogAllColumns,
			gatewayLogColumnsWithDefault,
			gatewayLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gatewayLogAllColumns,
			gatewayLogPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert gateway_log, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`gateway_log`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `gateway_log` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(gatewayLogType, gatewayLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gatewayLogType, gatewayLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for gateway_log")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == gatewayLogMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(gatewayLogType, gatewayLogMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for gateway_log")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for gateway_log")
	}

CacheNoHooks:
	if !cached {
		gatewayLogUpsertCacheMut.Lock()
		gatewayLogUpsertCache[key] = cache
		gatewayLogUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single GatewayLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GatewayLog) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no GatewayLog provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gatewayLogPrimaryKeyMapping)
	sql := "DELETE FROM `gateway_log` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from gateway_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for gateway_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gatewayLogQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no gatewayLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from gateway_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for gateway_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GatewayLogSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gatewayLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `gateway_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gatewayLogPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from gatewayLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for gateway_log")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GatewayLog) Reload(exec boil.Executor) error {
	ret, err := FindGatewayLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GatewayLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GatewayLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gatewayLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `gateway_log`.* FROM `gateway_log` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gatewayLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in GatewayLogSlice")
	}

	*o = slice

	return nil
}

// GatewayLogExists checks if the GatewayLog row exists.
func GatewayLogExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `gateway_log` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if gateway_log exists")
	}

	return exists, nil
}
