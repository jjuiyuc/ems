// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GroupGatewayRight is an object representing the database table.
type GroupGatewayRight struct {
	ID         int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	GroupID    int64      `boil:"group_id" json:"groupID" toml:"groupID" yaml:"groupID"`
	GWID       int64      `boil:"gw_id" json:"gwID" toml:"gwID" yaml:"gwID"`
	EnabledAt  time.Time  `boil:"enabled_at" json:"enabledAt" toml:"enabledAt" yaml:"enabledAt"`
	EnabledBy  null.Int64 `boil:"enabled_by" json:"enabledBy,omitempty" toml:"enabledBy" yaml:"enabledBy,omitempty"`
	DisabledAt null.Time  `boil:"disabled_at" json:"disabledAt,omitempty" toml:"disabledAt" yaml:"disabledAt,omitempty"`
	DisabledBy null.Int64 `boil:"disabled_by" json:"disabledBy,omitempty" toml:"disabledBy" yaml:"disabledBy,omitempty"`
	CreatedAt  time.Time  `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedBy  null.Int64 `boil:"created_by" json:"createdBy,omitempty" toml:"createdBy" yaml:"createdBy,omitempty"`
	UpdatedAt  time.Time  `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	UpdatedBy  null.Int64 `boil:"updated_by" json:"updatedBy,omitempty" toml:"updatedBy" yaml:"updatedBy,omitempty"`

	R *groupGatewayRightR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupGatewayRightL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupGatewayRightColumns = struct {
	ID         string
	GroupID    string
	GWID       string
	EnabledAt  string
	EnabledBy  string
	DisabledAt string
	DisabledBy string
	CreatedAt  string
	CreatedBy  string
	UpdatedAt  string
	UpdatedBy  string
}{
	ID:         "id",
	GroupID:    "group_id",
	GWID:       "gw_id",
	EnabledAt:  "enabled_at",
	EnabledBy:  "enabled_by",
	DisabledAt: "disabled_at",
	DisabledBy: "disabled_by",
	CreatedAt:  "created_at",
	CreatedBy:  "created_by",
	UpdatedAt:  "updated_at",
	UpdatedBy:  "updated_by",
}

var GroupGatewayRightTableColumns = struct {
	ID         string
	GroupID    string
	GWID       string
	EnabledAt  string
	EnabledBy  string
	DisabledAt string
	DisabledBy string
	CreatedAt  string
	CreatedBy  string
	UpdatedAt  string
	UpdatedBy  string
}{
	ID:         "group_gateway_right.id",
	GroupID:    "group_gateway_right.group_id",
	GWID:       "group_gateway_right.gw_id",
	EnabledAt:  "group_gateway_right.enabled_at",
	EnabledBy:  "group_gateway_right.enabled_by",
	DisabledAt: "group_gateway_right.disabled_at",
	DisabledBy: "group_gateway_right.disabled_by",
	CreatedAt:  "group_gateway_right.created_at",
	CreatedBy:  "group_gateway_right.created_by",
	UpdatedAt:  "group_gateway_right.updated_at",
	UpdatedBy:  "group_gateway_right.updated_by",
}

// Generated where

var GroupGatewayRightWhere = struct {
	ID         whereHelperint64
	GroupID    whereHelperint64
	GWID       whereHelperint64
	EnabledAt  whereHelpertime_Time
	EnabledBy  whereHelpernull_Int64
	DisabledAt whereHelpernull_Time
	DisabledBy whereHelpernull_Int64
	CreatedAt  whereHelpertime_Time
	CreatedBy  whereHelpernull_Int64
	UpdatedAt  whereHelpertime_Time
	UpdatedBy  whereHelpernull_Int64
}{
	ID:         whereHelperint64{field: "`group_gateway_right`.`id`"},
	GroupID:    whereHelperint64{field: "`group_gateway_right`.`group_id`"},
	GWID:       whereHelperint64{field: "`group_gateway_right`.`gw_id`"},
	EnabledAt:  whereHelpertime_Time{field: "`group_gateway_right`.`enabled_at`"},
	EnabledBy:  whereHelpernull_Int64{field: "`group_gateway_right`.`enabled_by`"},
	DisabledAt: whereHelpernull_Time{field: "`group_gateway_right`.`disabled_at`"},
	DisabledBy: whereHelpernull_Int64{field: "`group_gateway_right`.`disabled_by`"},
	CreatedAt:  whereHelpertime_Time{field: "`group_gateway_right`.`created_at`"},
	CreatedBy:  whereHelpernull_Int64{field: "`group_gateway_right`.`created_by`"},
	UpdatedAt:  whereHelpertime_Time{field: "`group_gateway_right`.`updated_at`"},
	UpdatedBy:  whereHelpernull_Int64{field: "`group_gateway_right`.`updated_by`"},
}

// GroupGatewayRightRels is where relationship names are stored.
var GroupGatewayRightRels = struct {
	Group string
	GW    string
}{
	Group: "Group",
	GW:    "GW",
}

// groupGatewayRightR is where relationships are stored.
type groupGatewayRightR struct {
	Group *Group   `boil:"Group" json:"Group" toml:"Group" yaml:"Group"`
	GW    *Gateway `boil:"GW" json:"GW" toml:"GW" yaml:"GW"`
}

// NewStruct creates a new relationship struct
func (*groupGatewayRightR) NewStruct() *groupGatewayRightR {
	return &groupGatewayRightR{}
}

func (r *groupGatewayRightR) GetGroup() *Group {
	if r == nil {
		return nil
	}
	return r.Group
}

func (r *groupGatewayRightR) GetGW() *Gateway {
	if r == nil {
		return nil
	}
	return r.GW
}

// groupGatewayRightL is where Load methods for each relationship are stored.
type groupGatewayRightL struct{}

var (
	groupGatewayRightAllColumns            = []string{"id", "group_id", "gw_id", "enabled_at", "enabled_by", "disabled_at", "disabled_by", "created_at", "created_by", "updated_at", "updated_by"}
	groupGatewayRightColumnsWithoutDefault = []string{"group_id", "gw_id", "enabled_at", "enabled_by", "disabled_at", "disabled_by", "created_by", "updated_by"}
	groupGatewayRightColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	groupGatewayRightPrimaryKeyColumns     = []string{"id"}
	groupGatewayRightGeneratedColumns      = []string{}
)

type (
	// GroupGatewayRightSlice is an alias for a slice of pointers to GroupGatewayRight.
	// This should almost always be used instead of []GroupGatewayRight.
	GroupGatewayRightSlice []*GroupGatewayRight

	groupGatewayRightQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupGatewayRightType                 = reflect.TypeOf(&GroupGatewayRight{})
	groupGatewayRightMapping              = queries.MakeStructMapping(groupGatewayRightType)
	groupGatewayRightPrimaryKeyMapping, _ = queries.BindMapping(groupGatewayRightType, groupGatewayRightMapping, groupGatewayRightPrimaryKeyColumns)
	groupGatewayRightInsertCacheMut       sync.RWMutex
	groupGatewayRightInsertCache          = make(map[string]insertCache)
	groupGatewayRightUpdateCacheMut       sync.RWMutex
	groupGatewayRightUpdateCache          = make(map[string]updateCache)
	groupGatewayRightUpsertCacheMut       sync.RWMutex
	groupGatewayRightUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single groupGatewayRight record from the query.
func (q groupGatewayRightQuery) One(exec boil.Executor) (*GroupGatewayRight, error) {
	o := &GroupGatewayRight{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for group_gateway_right")
	}

	return o, nil
}

// All returns all GroupGatewayRight records from the query.
func (q groupGatewayRightQuery) All(exec boil.Executor) (GroupGatewayRightSlice, error) {
	var o []*GroupGatewayRight

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to GroupGatewayRight slice")
	}

	return o, nil
}

// Count returns the count of all GroupGatewayRight records in the query.
func (q groupGatewayRightQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count group_gateway_right rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupGatewayRightQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if group_gateway_right exists")
	}

	return count > 0, nil
}

// Group pointed to by the foreign key.
func (o *GroupGatewayRight) Group(mods ...qm.QueryMod) groupQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GroupID),
	}

	queryMods = append(queryMods, mods...)

	return Groups(queryMods...)
}

// GW pointed to by the foreign key.
func (o *GroupGatewayRight) GW(mods ...qm.QueryMod) gatewayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GWID),
	}

	queryMods = append(queryMods, mods...)

	return Gateways(queryMods...)
}

// LoadGroup allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupGatewayRightL) LoadGroup(e boil.Executor, singular bool, maybeGroupGatewayRight interface{}, mods queries.Applicator) error {
	var slice []*GroupGatewayRight
	var object *GroupGatewayRight

	if singular {
		object = maybeGroupGatewayRight.(*GroupGatewayRight)
	} else {
		slice = *maybeGroupGatewayRight.(*[]*GroupGatewayRight)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupGatewayRightR{}
		}
		args = append(args, object.GroupID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupGatewayRightR{}
			}

			for _, a := range args {
				if a == obj.GroupID {
					continue Outer
				}
			}

			args = append(args, obj.GroupID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`group`),
		qm.WhereIn(`group.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Group")
	}

	var resultSlice []*Group
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Group")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for group")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for group")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Group = foreign
		if foreign.R == nil {
			foreign.R = &groupR{}
		}
		foreign.R.GroupGatewayRights = append(foreign.R.GroupGatewayRights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GroupID == foreign.ID {
				local.R.Group = foreign
				if foreign.R == nil {
					foreign.R = &groupR{}
				}
				foreign.R.GroupGatewayRights = append(foreign.R.GroupGatewayRights, local)
				break
			}
		}
	}

	return nil
}

// LoadGW allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupGatewayRightL) LoadGW(e boil.Executor, singular bool, maybeGroupGatewayRight interface{}, mods queries.Applicator) error {
	var slice []*GroupGatewayRight
	var object *GroupGatewayRight

	if singular {
		object = maybeGroupGatewayRight.(*GroupGatewayRight)
	} else {
		slice = *maybeGroupGatewayRight.(*[]*GroupGatewayRight)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupGatewayRightR{}
		}
		args = append(args, object.GWID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupGatewayRightR{}
			}

			for _, a := range args {
				if a == obj.GWID {
					continue Outer
				}
			}

			args = append(args, obj.GWID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gateway`),
		qm.WhereIn(`gateway.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Gateway")
	}

	var resultSlice []*Gateway
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Gateway")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gateway")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gateway")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GW = foreign
		if foreign.R == nil {
			foreign.R = &gatewayR{}
		}
		foreign.R.GWGroupGatewayRights = append(foreign.R.GWGroupGatewayRights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GWID == foreign.ID {
				local.R.GW = foreign
				if foreign.R == nil {
					foreign.R = &gatewayR{}
				}
				foreign.R.GWGroupGatewayRights = append(foreign.R.GWGroupGatewayRights, local)
				break
			}
		}
	}

	return nil
}

// SetGroup of the groupGatewayRight to the related item.
// Sets o.R.Group to related.
// Adds o to related.R.GroupGatewayRights.
func (o *GroupGatewayRight) SetGroup(exec boil.Executor, insert bool, related *Group) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `group_gateway_right` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"group_id"}),
		strmangle.WhereClause("`", "`", 0, groupGatewayRightPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GroupID = related.ID
	if o.R == nil {
		o.R = &groupGatewayRightR{
			Group: related,
		}
	} else {
		o.R.Group = related
	}

	if related.R == nil {
		related.R = &groupR{
			GroupGatewayRights: GroupGatewayRightSlice{o},
		}
	} else {
		related.R.GroupGatewayRights = append(related.R.GroupGatewayRights, o)
	}

	return nil
}

// SetGW of the groupGatewayRight to the related item.
// Sets o.R.GW to related.
// Adds o to related.R.GWGroupGatewayRights.
func (o *GroupGatewayRight) SetGW(exec boil.Executor, insert bool, related *Gateway) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `group_gateway_right` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"gw_id"}),
		strmangle.WhereClause("`", "`", 0, groupGatewayRightPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GWID = related.ID
	if o.R == nil {
		o.R = &groupGatewayRightR{
			GW: related,
		}
	} else {
		o.R.GW = related
	}

	if related.R == nil {
		related.R = &gatewayR{
			GWGroupGatewayRights: GroupGatewayRightSlice{o},
		}
	} else {
		related.R.GWGroupGatewayRights = append(related.R.GWGroupGatewayRights, o)
	}

	return nil
}

// GroupGatewayRights retrieves all the records using an executor.
func GroupGatewayRights(mods ...qm.QueryMod) groupGatewayRightQuery {
	mods = append(mods, qm.From("`group_gateway_right`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`group_gateway_right`.*"})
	}

	return groupGatewayRightQuery{q}
}

// FindGroupGatewayRight retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupGatewayRight(exec boil.Executor, iD int64, selectCols ...string) (*GroupGatewayRight, error) {
	groupGatewayRightObj := &GroupGatewayRight{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `group_gateway_right` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, groupGatewayRightObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from group_gateway_right")
	}

	return groupGatewayRightObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupGatewayRight) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no group_gateway_right provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(groupGatewayRightColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupGatewayRightInsertCacheMut.RLock()
	cache, cached := groupGatewayRightInsertCache[key]
	groupGatewayRightInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupGatewayRightAllColumns,
			groupGatewayRightColumnsWithDefault,
			groupGatewayRightColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupGatewayRightType, groupGatewayRightMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupGatewayRightType, groupGatewayRightMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `group_gateway_right` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `group_gateway_right` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `group_gateway_right` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, groupGatewayRightPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into group_gateway_right")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == groupGatewayRightMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for group_gateway_right")
	}

CacheNoHooks:
	if !cached {
		groupGatewayRightInsertCacheMut.Lock()
		groupGatewayRightInsertCache[key] = cache
		groupGatewayRightInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GroupGatewayRight.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupGatewayRight) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	groupGatewayRightUpdateCacheMut.RLock()
	cache, cached := groupGatewayRightUpdateCache[key]
	groupGatewayRightUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupGatewayRightAllColumns,
			groupGatewayRightPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update group_gateway_right, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `group_gateway_right` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, groupGatewayRightPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupGatewayRightType, groupGatewayRightMapping, append(wl, groupGatewayRightPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update group_gateway_right row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for group_gateway_right")
	}

	if !cached {
		groupGatewayRightUpdateCacheMut.Lock()
		groupGatewayRightUpdateCache[key] = cache
		groupGatewayRightUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q groupGatewayRightQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for group_gateway_right")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for group_gateway_right")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupGatewayRightSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupGatewayRightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `group_gateway_right` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupGatewayRightPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in groupGatewayRight slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all groupGatewayRight")
	}
	return rowsAff, nil
}

var mySQLGroupGatewayRightUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroupGatewayRight) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no group_gateway_right provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(groupGatewayRightColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGroupGatewayRightUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupGatewayRightUpsertCacheMut.RLock()
	cache, cached := groupGatewayRightUpsertCache[key]
	groupGatewayRightUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			groupGatewayRightAllColumns,
			groupGatewayRightColumnsWithDefault,
			groupGatewayRightColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			groupGatewayRightAllColumns,
			groupGatewayRightPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert group_gateway_right, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`group_gateway_right`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `group_gateway_right` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(groupGatewayRightType, groupGatewayRightMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupGatewayRightType, groupGatewayRightMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for group_gateway_right")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == groupGatewayRightMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(groupGatewayRightType, groupGatewayRightMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for group_gateway_right")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for group_gateway_right")
	}

CacheNoHooks:
	if !cached {
		groupGatewayRightUpsertCacheMut.Lock()
		groupGatewayRightUpsertCache[key] = cache
		groupGatewayRightUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single GroupGatewayRight record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupGatewayRight) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no GroupGatewayRight provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupGatewayRightPrimaryKeyMapping)
	sql := "DELETE FROM `group_gateway_right` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from group_gateway_right")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for group_gateway_right")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupGatewayRightQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no groupGatewayRightQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from group_gateway_right")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for group_gateway_right")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupGatewayRightSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupGatewayRightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `group_gateway_right` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupGatewayRightPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from groupGatewayRight slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for group_gateway_right")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupGatewayRight) Reload(exec boil.Executor) error {
	ret, err := FindGroupGatewayRight(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupGatewayRightSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupGatewayRightSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupGatewayRightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `group_gateway_right`.* FROM `group_gateway_right` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupGatewayRightPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in GroupGatewayRightSlice")
	}

	*o = slice

	return nil
}

// GroupGatewayRightExists checks if the GroupGatewayRight row exists.
func GroupGatewayRightExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `group_gateway_right` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if group_gateway_right exists")
	}

	return exists, nil
}
