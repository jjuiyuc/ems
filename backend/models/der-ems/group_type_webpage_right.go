// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GroupTypeWebpageRight is an object representing the database table.
type GroupTypeWebpageRight struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TypeID     int64     `boil:"type_id" json:"typeID" toml:"typeID" yaml:"typeID"`
	WebpageID  int64     `boil:"webpage_id" json:"webpageID" toml:"webpageID" yaml:"webpageID"`
	CreateData null.Bool `boil:"create_data" json:"createData,omitempty" toml:"createData" yaml:"createData,omitempty"`
	ReadData   null.Bool `boil:"read_data" json:"readData,omitempty" toml:"readData" yaml:"readData,omitempty"`
	UpdateData null.Bool `boil:"update_data" json:"updateData,omitempty" toml:"updateData" yaml:"updateData,omitempty"`
	DeleteData null.Bool `boil:"delete_data" json:"deleteData,omitempty" toml:"deleteData" yaml:"deleteData,omitempty"`
	CreatedAt  time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *groupTypeWebpageRightR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L groupTypeWebpageRightL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GroupTypeWebpageRightColumns = struct {
	ID         string
	TypeID     string
	WebpageID  string
	CreateData string
	ReadData   string
	UpdateData string
	DeleteData string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	TypeID:     "type_id",
	WebpageID:  "webpage_id",
	CreateData: "create_data",
	ReadData:   "read_data",
	UpdateData: "update_data",
	DeleteData: "delete_data",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var GroupTypeWebpageRightTableColumns = struct {
	ID         string
	TypeID     string
	WebpageID  string
	CreateData string
	ReadData   string
	UpdateData string
	DeleteData string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "group_type_webpage_right.id",
	TypeID:     "group_type_webpage_right.type_id",
	WebpageID:  "group_type_webpage_right.webpage_id",
	CreateData: "group_type_webpage_right.create_data",
	ReadData:   "group_type_webpage_right.read_data",
	UpdateData: "group_type_webpage_right.update_data",
	DeleteData: "group_type_webpage_right.delete_data",
	CreatedAt:  "group_type_webpage_right.created_at",
	UpdatedAt:  "group_type_webpage_right.updated_at",
}

// Generated where

var GroupTypeWebpageRightWhere = struct {
	ID         whereHelperint64
	TypeID     whereHelperint64
	WebpageID  whereHelperint64
	CreateData whereHelpernull_Bool
	ReadData   whereHelpernull_Bool
	UpdateData whereHelpernull_Bool
	DeleteData whereHelpernull_Bool
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "`group_type_webpage_right`.`id`"},
	TypeID:     whereHelperint64{field: "`group_type_webpage_right`.`type_id`"},
	WebpageID:  whereHelperint64{field: "`group_type_webpage_right`.`webpage_id`"},
	CreateData: whereHelpernull_Bool{field: "`group_type_webpage_right`.`create_data`"},
	ReadData:   whereHelpernull_Bool{field: "`group_type_webpage_right`.`read_data`"},
	UpdateData: whereHelpernull_Bool{field: "`group_type_webpage_right`.`update_data`"},
	DeleteData: whereHelpernull_Bool{field: "`group_type_webpage_right`.`delete_data`"},
	CreatedAt:  whereHelpertime_Time{field: "`group_type_webpage_right`.`created_at`"},
	UpdatedAt:  whereHelpertime_Time{field: "`group_type_webpage_right`.`updated_at`"},
}

// GroupTypeWebpageRightRels is where relationship names are stored.
var GroupTypeWebpageRightRels = struct {
	Type    string
	Webpage string
}{
	Type:    "Type",
	Webpage: "Webpage",
}

// groupTypeWebpageRightR is where relationships are stored.
type groupTypeWebpageRightR struct {
	Type    *GroupType `boil:"Type" json:"Type" toml:"Type" yaml:"Type"`
	Webpage *Webpage   `boil:"Webpage" json:"Webpage" toml:"Webpage" yaml:"Webpage"`
}

// NewStruct creates a new relationship struct
func (*groupTypeWebpageRightR) NewStruct() *groupTypeWebpageRightR {
	return &groupTypeWebpageRightR{}
}

func (r *groupTypeWebpageRightR) GetType() *GroupType {
	if r == nil {
		return nil
	}
	return r.Type
}

func (r *groupTypeWebpageRightR) GetWebpage() *Webpage {
	if r == nil {
		return nil
	}
	return r.Webpage
}

// groupTypeWebpageRightL is where Load methods for each relationship are stored.
type groupTypeWebpageRightL struct{}

var (
	groupTypeWebpageRightAllColumns            = []string{"id", "type_id", "webpage_id", "create_data", "read_data", "update_data", "delete_data", "created_at", "updated_at"}
	groupTypeWebpageRightColumnsWithoutDefault = []string{"type_id", "webpage_id"}
	groupTypeWebpageRightColumnsWithDefault    = []string{"id", "create_data", "read_data", "update_data", "delete_data", "created_at", "updated_at"}
	groupTypeWebpageRightPrimaryKeyColumns     = []string{"id"}
	groupTypeWebpageRightGeneratedColumns      = []string{}
)

type (
	// GroupTypeWebpageRightSlice is an alias for a slice of pointers to GroupTypeWebpageRight.
	// This should almost always be used instead of []GroupTypeWebpageRight.
	GroupTypeWebpageRightSlice []*GroupTypeWebpageRight

	groupTypeWebpageRightQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	groupTypeWebpageRightType                 = reflect.TypeOf(&GroupTypeWebpageRight{})
	groupTypeWebpageRightMapping              = queries.MakeStructMapping(groupTypeWebpageRightType)
	groupTypeWebpageRightPrimaryKeyMapping, _ = queries.BindMapping(groupTypeWebpageRightType, groupTypeWebpageRightMapping, groupTypeWebpageRightPrimaryKeyColumns)
	groupTypeWebpageRightInsertCacheMut       sync.RWMutex
	groupTypeWebpageRightInsertCache          = make(map[string]insertCache)
	groupTypeWebpageRightUpdateCacheMut       sync.RWMutex
	groupTypeWebpageRightUpdateCache          = make(map[string]updateCache)
	groupTypeWebpageRightUpsertCacheMut       sync.RWMutex
	groupTypeWebpageRightUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single groupTypeWebpageRight record from the query.
func (q groupTypeWebpageRightQuery) One(exec boil.Executor) (*GroupTypeWebpageRight, error) {
	o := &GroupTypeWebpageRight{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for group_type_webpage_right")
	}

	return o, nil
}

// All returns all GroupTypeWebpageRight records from the query.
func (q groupTypeWebpageRightQuery) All(exec boil.Executor) (GroupTypeWebpageRightSlice, error) {
	var o []*GroupTypeWebpageRight

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to GroupTypeWebpageRight slice")
	}

	return o, nil
}

// Count returns the count of all GroupTypeWebpageRight records in the query.
func (q groupTypeWebpageRightQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count group_type_webpage_right rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q groupTypeWebpageRightQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if group_type_webpage_right exists")
	}

	return count > 0, nil
}

// Type pointed to by the foreign key.
func (o *GroupTypeWebpageRight) Type(mods ...qm.QueryMod) groupTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TypeID),
	}

	queryMods = append(queryMods, mods...)

	return GroupTypes(queryMods...)
}

// Webpage pointed to by the foreign key.
func (o *GroupTypeWebpageRight) Webpage(mods ...qm.QueryMod) webpageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.WebpageID),
	}

	queryMods = append(queryMods, mods...)

	return Webpages(queryMods...)
}

// LoadType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupTypeWebpageRightL) LoadType(e boil.Executor, singular bool, maybeGroupTypeWebpageRight interface{}, mods queries.Applicator) error {
	var slice []*GroupTypeWebpageRight
	var object *GroupTypeWebpageRight

	if singular {
		object = maybeGroupTypeWebpageRight.(*GroupTypeWebpageRight)
	} else {
		slice = *maybeGroupTypeWebpageRight.(*[]*GroupTypeWebpageRight)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupTypeWebpageRightR{}
		}
		args = append(args, object.TypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupTypeWebpageRightR{}
			}

			for _, a := range args {
				if a == obj.TypeID {
					continue Outer
				}
			}

			args = append(args, obj.TypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`group_type`),
		qm.WhereIn(`group_type.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GroupType")
	}

	var resultSlice []*GroupType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GroupType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for group_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for group_type")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Type = foreign
		if foreign.R == nil {
			foreign.R = &groupTypeR{}
		}
		foreign.R.TypeGroupTypeWebpageRights = append(foreign.R.TypeGroupTypeWebpageRights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TypeID == foreign.ID {
				local.R.Type = foreign
				if foreign.R == nil {
					foreign.R = &groupTypeR{}
				}
				foreign.R.TypeGroupTypeWebpageRights = append(foreign.R.TypeGroupTypeWebpageRights, local)
				break
			}
		}
	}

	return nil
}

// LoadWebpage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (groupTypeWebpageRightL) LoadWebpage(e boil.Executor, singular bool, maybeGroupTypeWebpageRight interface{}, mods queries.Applicator) error {
	var slice []*GroupTypeWebpageRight
	var object *GroupTypeWebpageRight

	if singular {
		object = maybeGroupTypeWebpageRight.(*GroupTypeWebpageRight)
	} else {
		slice = *maybeGroupTypeWebpageRight.(*[]*GroupTypeWebpageRight)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &groupTypeWebpageRightR{}
		}
		args = append(args, object.WebpageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &groupTypeWebpageRightR{}
			}

			for _, a := range args {
				if a == obj.WebpageID {
					continue Outer
				}
			}

			args = append(args, obj.WebpageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`webpage`),
		qm.WhereIn(`webpage.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Webpage")
	}

	var resultSlice []*Webpage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Webpage")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for webpage")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for webpage")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Webpage = foreign
		if foreign.R == nil {
			foreign.R = &webpageR{}
		}
		foreign.R.GroupTypeWebpageRights = append(foreign.R.GroupTypeWebpageRights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WebpageID == foreign.ID {
				local.R.Webpage = foreign
				if foreign.R == nil {
					foreign.R = &webpageR{}
				}
				foreign.R.GroupTypeWebpageRights = append(foreign.R.GroupTypeWebpageRights, local)
				break
			}
		}
	}

	return nil
}

// SetType of the groupTypeWebpageRight to the related item.
// Sets o.R.Type to related.
// Adds o to related.R.TypeGroupTypeWebpageRights.
func (o *GroupTypeWebpageRight) SetType(exec boil.Executor, insert bool, related *GroupType) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `group_type_webpage_right` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"type_id"}),
		strmangle.WhereClause("`", "`", 0, groupTypeWebpageRightPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TypeID = related.ID
	if o.R == nil {
		o.R = &groupTypeWebpageRightR{
			Type: related,
		}
	} else {
		o.R.Type = related
	}

	if related.R == nil {
		related.R = &groupTypeR{
			TypeGroupTypeWebpageRights: GroupTypeWebpageRightSlice{o},
		}
	} else {
		related.R.TypeGroupTypeWebpageRights = append(related.R.TypeGroupTypeWebpageRights, o)
	}

	return nil
}

// SetWebpage of the groupTypeWebpageRight to the related item.
// Sets o.R.Webpage to related.
// Adds o to related.R.GroupTypeWebpageRights.
func (o *GroupTypeWebpageRight) SetWebpage(exec boil.Executor, insert bool, related *Webpage) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `group_type_webpage_right` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"webpage_id"}),
		strmangle.WhereClause("`", "`", 0, groupTypeWebpageRightPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WebpageID = related.ID
	if o.R == nil {
		o.R = &groupTypeWebpageRightR{
			Webpage: related,
		}
	} else {
		o.R.Webpage = related
	}

	if related.R == nil {
		related.R = &webpageR{
			GroupTypeWebpageRights: GroupTypeWebpageRightSlice{o},
		}
	} else {
		related.R.GroupTypeWebpageRights = append(related.R.GroupTypeWebpageRights, o)
	}

	return nil
}

// GroupTypeWebpageRights retrieves all the records using an executor.
func GroupTypeWebpageRights(mods ...qm.QueryMod) groupTypeWebpageRightQuery {
	mods = append(mods, qm.From("`group_type_webpage_right`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`group_type_webpage_right`.*"})
	}

	return groupTypeWebpageRightQuery{q}
}

// FindGroupTypeWebpageRight retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGroupTypeWebpageRight(exec boil.Executor, iD int64, selectCols ...string) (*GroupTypeWebpageRight, error) {
	groupTypeWebpageRightObj := &GroupTypeWebpageRight{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `group_type_webpage_right` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, groupTypeWebpageRightObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from group_type_webpage_right")
	}

	return groupTypeWebpageRightObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GroupTypeWebpageRight) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no group_type_webpage_right provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(groupTypeWebpageRightColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	groupTypeWebpageRightInsertCacheMut.RLock()
	cache, cached := groupTypeWebpageRightInsertCache[key]
	groupTypeWebpageRightInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			groupTypeWebpageRightAllColumns,
			groupTypeWebpageRightColumnsWithDefault,
			groupTypeWebpageRightColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(groupTypeWebpageRightType, groupTypeWebpageRightMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(groupTypeWebpageRightType, groupTypeWebpageRightMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `group_type_webpage_right` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `group_type_webpage_right` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `group_type_webpage_right` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, groupTypeWebpageRightPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into group_type_webpage_right")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == groupTypeWebpageRightMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for group_type_webpage_right")
	}

CacheNoHooks:
	if !cached {
		groupTypeWebpageRightInsertCacheMut.Lock()
		groupTypeWebpageRightInsertCache[key] = cache
		groupTypeWebpageRightInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GroupTypeWebpageRight.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GroupTypeWebpageRight) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	groupTypeWebpageRightUpdateCacheMut.RLock()
	cache, cached := groupTypeWebpageRightUpdateCache[key]
	groupTypeWebpageRightUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			groupTypeWebpageRightAllColumns,
			groupTypeWebpageRightPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update group_type_webpage_right, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `group_type_webpage_right` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, groupTypeWebpageRightPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(groupTypeWebpageRightType, groupTypeWebpageRightMapping, append(wl, groupTypeWebpageRightPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update group_type_webpage_right row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for group_type_webpage_right")
	}

	if !cached {
		groupTypeWebpageRightUpdateCacheMut.Lock()
		groupTypeWebpageRightUpdateCache[key] = cache
		groupTypeWebpageRightUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q groupTypeWebpageRightQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for group_type_webpage_right")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for group_type_webpage_right")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GroupTypeWebpageRightSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupTypeWebpageRightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `group_type_webpage_right` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupTypeWebpageRightPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in groupTypeWebpageRight slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all groupTypeWebpageRight")
	}
	return rowsAff, nil
}

var mySQLGroupTypeWebpageRightUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GroupTypeWebpageRight) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no group_type_webpage_right provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(groupTypeWebpageRightColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLGroupTypeWebpageRightUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	groupTypeWebpageRightUpsertCacheMut.RLock()
	cache, cached := groupTypeWebpageRightUpsertCache[key]
	groupTypeWebpageRightUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			groupTypeWebpageRightAllColumns,
			groupTypeWebpageRightColumnsWithDefault,
			groupTypeWebpageRightColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			groupTypeWebpageRightAllColumns,
			groupTypeWebpageRightPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert group_type_webpage_right, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`group_type_webpage_right`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `group_type_webpage_right` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(groupTypeWebpageRightType, groupTypeWebpageRightMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(groupTypeWebpageRightType, groupTypeWebpageRightMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for group_type_webpage_right")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == groupTypeWebpageRightMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(groupTypeWebpageRightType, groupTypeWebpageRightMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for group_type_webpage_right")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for group_type_webpage_right")
	}

CacheNoHooks:
	if !cached {
		groupTypeWebpageRightUpsertCacheMut.Lock()
		groupTypeWebpageRightUpsertCache[key] = cache
		groupTypeWebpageRightUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single GroupTypeWebpageRight record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GroupTypeWebpageRight) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no GroupTypeWebpageRight provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), groupTypeWebpageRightPrimaryKeyMapping)
	sql := "DELETE FROM `group_type_webpage_right` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from group_type_webpage_right")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for group_type_webpage_right")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q groupTypeWebpageRightQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no groupTypeWebpageRightQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from group_type_webpage_right")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for group_type_webpage_right")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GroupTypeWebpageRightSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupTypeWebpageRightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `group_type_webpage_right` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupTypeWebpageRightPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from groupTypeWebpageRight slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for group_type_webpage_right")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GroupTypeWebpageRight) Reload(exec boil.Executor) error {
	ret, err := FindGroupTypeWebpageRight(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GroupTypeWebpageRightSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GroupTypeWebpageRightSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), groupTypeWebpageRightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `group_type_webpage_right`.* FROM `group_type_webpage_right` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, groupTypeWebpageRightPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in GroupTypeWebpageRightSlice")
	}

	*o = slice

	return nil
}

// GroupTypeWebpageRightExists checks if the GroupTypeWebpageRight row exists.
func GroupTypeWebpageRightExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `group_type_webpage_right` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if group_type_webpage_right exists")
	}

	return exists, nil
}
