// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PowerOutagePeriod is an object representing the database table.
type PowerOutagePeriod struct {
	ID        int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	GWID      int64      `boil:"gw_id" json:"gwID" toml:"gwID" yaml:"gwID"`
	Type      string     `boil:"type" json:"type" toml:"type" yaml:"type"`
	StartedAt time.Time  `boil:"started_at" json:"startedAt" toml:"startedAt" yaml:"startedAt"`
	EndedAt   time.Time  `boil:"ended_at" json:"endedAt" toml:"endedAt" yaml:"endedAt"`
	CreatedAt time.Time  `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	CreatedBy null.Int64 `boil:"created_by" json:"createdBy,omitempty" toml:"createdBy" yaml:"createdBy,omitempty"`
	DeletedAt null.Time  `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	DeletedBy null.Int64 `boil:"deleted_by" json:"deletedBy,omitempty" toml:"deletedBy" yaml:"deletedBy,omitempty"`

	R *powerOutagePeriodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L powerOutagePeriodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PowerOutagePeriodColumns = struct {
	ID        string
	GWID      string
	Type      string
	StartedAt string
	EndedAt   string
	CreatedAt string
	CreatedBy string
	DeletedAt string
	DeletedBy string
}{
	ID:        "id",
	GWID:      "gw_id",
	Type:      "type",
	StartedAt: "started_at",
	EndedAt:   "ended_at",
	CreatedAt: "created_at",
	CreatedBy: "created_by",
	DeletedAt: "deleted_at",
	DeletedBy: "deleted_by",
}

var PowerOutagePeriodTableColumns = struct {
	ID        string
	GWID      string
	Type      string
	StartedAt string
	EndedAt   string
	CreatedAt string
	CreatedBy string
	DeletedAt string
	DeletedBy string
}{
	ID:        "power_outage_period.id",
	GWID:      "power_outage_period.gw_id",
	Type:      "power_outage_period.type",
	StartedAt: "power_outage_period.started_at",
	EndedAt:   "power_outage_period.ended_at",
	CreatedAt: "power_outage_period.created_at",
	CreatedBy: "power_outage_period.created_by",
	DeletedAt: "power_outage_period.deleted_at",
	DeletedBy: "power_outage_period.deleted_by",
}

// Generated where

var PowerOutagePeriodWhere = struct {
	ID        whereHelperint64
	GWID      whereHelperint64
	Type      whereHelperstring
	StartedAt whereHelpertime_Time
	EndedAt   whereHelpertime_Time
	CreatedAt whereHelpertime_Time
	CreatedBy whereHelpernull_Int64
	DeletedAt whereHelpernull_Time
	DeletedBy whereHelpernull_Int64
}{
	ID:        whereHelperint64{field: "`power_outage_period`.`id`"},
	GWID:      whereHelperint64{field: "`power_outage_period`.`gw_id`"},
	Type:      whereHelperstring{field: "`power_outage_period`.`type`"},
	StartedAt: whereHelpertime_Time{field: "`power_outage_period`.`started_at`"},
	EndedAt:   whereHelpertime_Time{field: "`power_outage_period`.`ended_at`"},
	CreatedAt: whereHelpertime_Time{field: "`power_outage_period`.`created_at`"},
	CreatedBy: whereHelpernull_Int64{field: "`power_outage_period`.`created_by`"},
	DeletedAt: whereHelpernull_Time{field: "`power_outage_period`.`deleted_at`"},
	DeletedBy: whereHelpernull_Int64{field: "`power_outage_period`.`deleted_by`"},
}

// PowerOutagePeriodRels is where relationship names are stored.
var PowerOutagePeriodRels = struct {
	GW string
}{
	GW: "GW",
}

// powerOutagePeriodR is where relationships are stored.
type powerOutagePeriodR struct {
	GW *Gateway `boil:"GW" json:"GW" toml:"GW" yaml:"GW"`
}

// NewStruct creates a new relationship struct
func (*powerOutagePeriodR) NewStruct() *powerOutagePeriodR {
	return &powerOutagePeriodR{}
}

func (r *powerOutagePeriodR) GetGW() *Gateway {
	if r == nil {
		return nil
	}
	return r.GW
}

// powerOutagePeriodL is where Load methods for each relationship are stored.
type powerOutagePeriodL struct{}

var (
	powerOutagePeriodAllColumns            = []string{"id", "gw_id", "type", "started_at", "ended_at", "created_at", "created_by", "deleted_at", "deleted_by"}
	powerOutagePeriodColumnsWithoutDefault = []string{"gw_id", "type", "started_at", "ended_at", "created_by", "deleted_at", "deleted_by"}
	powerOutagePeriodColumnsWithDefault    = []string{"id", "created_at"}
	powerOutagePeriodPrimaryKeyColumns     = []string{"id"}
	powerOutagePeriodGeneratedColumns      = []string{}
)

type (
	// PowerOutagePeriodSlice is an alias for a slice of pointers to PowerOutagePeriod.
	// This should almost always be used instead of []PowerOutagePeriod.
	PowerOutagePeriodSlice []*PowerOutagePeriod

	powerOutagePeriodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	powerOutagePeriodType                 = reflect.TypeOf(&PowerOutagePeriod{})
	powerOutagePeriodMapping              = queries.MakeStructMapping(powerOutagePeriodType)
	powerOutagePeriodPrimaryKeyMapping, _ = queries.BindMapping(powerOutagePeriodType, powerOutagePeriodMapping, powerOutagePeriodPrimaryKeyColumns)
	powerOutagePeriodInsertCacheMut       sync.RWMutex
	powerOutagePeriodInsertCache          = make(map[string]insertCache)
	powerOutagePeriodUpdateCacheMut       sync.RWMutex
	powerOutagePeriodUpdateCache          = make(map[string]updateCache)
	powerOutagePeriodUpsertCacheMut       sync.RWMutex
	powerOutagePeriodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single powerOutagePeriod record from the query.
func (q powerOutagePeriodQuery) One(exec boil.Executor) (*PowerOutagePeriod, error) {
	o := &PowerOutagePeriod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for power_outage_period")
	}

	return o, nil
}

// All returns all PowerOutagePeriod records from the query.
func (q powerOutagePeriodQuery) All(exec boil.Executor) (PowerOutagePeriodSlice, error) {
	var o []*PowerOutagePeriod

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to PowerOutagePeriod slice")
	}

	return o, nil
}

// Count returns the count of all PowerOutagePeriod records in the query.
func (q powerOutagePeriodQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count power_outage_period rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q powerOutagePeriodQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if power_outage_period exists")
	}

	return count > 0, nil
}

// GW pointed to by the foreign key.
func (o *PowerOutagePeriod) GW(mods ...qm.QueryMod) gatewayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GWID),
	}

	queryMods = append(queryMods, mods...)

	return Gateways(queryMods...)
}

// LoadGW allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (powerOutagePeriodL) LoadGW(e boil.Executor, singular bool, maybePowerOutagePeriod interface{}, mods queries.Applicator) error {
	var slice []*PowerOutagePeriod
	var object *PowerOutagePeriod

	if singular {
		object = maybePowerOutagePeriod.(*PowerOutagePeriod)
	} else {
		slice = *maybePowerOutagePeriod.(*[]*PowerOutagePeriod)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &powerOutagePeriodR{}
		}
		args = append(args, object.GWID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &powerOutagePeriodR{}
			}

			for _, a := range args {
				if a == obj.GWID {
					continue Outer
				}
			}

			args = append(args, obj.GWID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gateway`),
		qm.WhereIn(`gateway.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Gateway")
	}

	var resultSlice []*Gateway
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Gateway")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gateway")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gateway")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GW = foreign
		if foreign.R == nil {
			foreign.R = &gatewayR{}
		}
		foreign.R.GWPowerOutagePeriods = append(foreign.R.GWPowerOutagePeriods, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GWID == foreign.ID {
				local.R.GW = foreign
				if foreign.R == nil {
					foreign.R = &gatewayR{}
				}
				foreign.R.GWPowerOutagePeriods = append(foreign.R.GWPowerOutagePeriods, local)
				break
			}
		}
	}

	return nil
}

// SetGW of the powerOutagePeriod to the related item.
// Sets o.R.GW to related.
// Adds o to related.R.GWPowerOutagePeriods.
func (o *PowerOutagePeriod) SetGW(exec boil.Executor, insert bool, related *Gateway) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `power_outage_period` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"gw_id"}),
		strmangle.WhereClause("`", "`", 0, powerOutagePeriodPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GWID = related.ID
	if o.R == nil {
		o.R = &powerOutagePeriodR{
			GW: related,
		}
	} else {
		o.R.GW = related
	}

	if related.R == nil {
		related.R = &gatewayR{
			GWPowerOutagePeriods: PowerOutagePeriodSlice{o},
		}
	} else {
		related.R.GWPowerOutagePeriods = append(related.R.GWPowerOutagePeriods, o)
	}

	return nil
}

// PowerOutagePeriods retrieves all the records using an executor.
func PowerOutagePeriods(mods ...qm.QueryMod) powerOutagePeriodQuery {
	mods = append(mods, qm.From("`power_outage_period`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`power_outage_period`.*"})
	}

	return powerOutagePeriodQuery{q}
}

// FindPowerOutagePeriod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPowerOutagePeriod(exec boil.Executor, iD int64, selectCols ...string) (*PowerOutagePeriod, error) {
	powerOutagePeriodObj := &PowerOutagePeriod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `power_outage_period` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, powerOutagePeriodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from power_outage_period")
	}

	return powerOutagePeriodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PowerOutagePeriod) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no power_outage_period provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(powerOutagePeriodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	powerOutagePeriodInsertCacheMut.RLock()
	cache, cached := powerOutagePeriodInsertCache[key]
	powerOutagePeriodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			powerOutagePeriodAllColumns,
			powerOutagePeriodColumnsWithDefault,
			powerOutagePeriodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(powerOutagePeriodType, powerOutagePeriodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(powerOutagePeriodType, powerOutagePeriodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `power_outage_period` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `power_outage_period` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `power_outage_period` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, powerOutagePeriodPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into power_outage_period")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == powerOutagePeriodMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for power_outage_period")
	}

CacheNoHooks:
	if !cached {
		powerOutagePeriodInsertCacheMut.Lock()
		powerOutagePeriodInsertCache[key] = cache
		powerOutagePeriodInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PowerOutagePeriod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PowerOutagePeriod) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	powerOutagePeriodUpdateCacheMut.RLock()
	cache, cached := powerOutagePeriodUpdateCache[key]
	powerOutagePeriodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			powerOutagePeriodAllColumns,
			powerOutagePeriodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update power_outage_period, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `power_outage_period` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, powerOutagePeriodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(powerOutagePeriodType, powerOutagePeriodMapping, append(wl, powerOutagePeriodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update power_outage_period row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for power_outage_period")
	}

	if !cached {
		powerOutagePeriodUpdateCacheMut.Lock()
		powerOutagePeriodUpdateCache[key] = cache
		powerOutagePeriodUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q powerOutagePeriodQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for power_outage_period")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for power_outage_period")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PowerOutagePeriodSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powerOutagePeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `power_outage_period` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, powerOutagePeriodPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in powerOutagePeriod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all powerOutagePeriod")
	}
	return rowsAff, nil
}

var mySQLPowerOutagePeriodUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PowerOutagePeriod) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no power_outage_period provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(powerOutagePeriodColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPowerOutagePeriodUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	powerOutagePeriodUpsertCacheMut.RLock()
	cache, cached := powerOutagePeriodUpsertCache[key]
	powerOutagePeriodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			powerOutagePeriodAllColumns,
			powerOutagePeriodColumnsWithDefault,
			powerOutagePeriodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			powerOutagePeriodAllColumns,
			powerOutagePeriodPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert power_outage_period, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`power_outage_period`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `power_outage_period` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(powerOutagePeriodType, powerOutagePeriodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(powerOutagePeriodType, powerOutagePeriodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for power_outage_period")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == powerOutagePeriodMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(powerOutagePeriodType, powerOutagePeriodMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for power_outage_period")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for power_outage_period")
	}

CacheNoHooks:
	if !cached {
		powerOutagePeriodUpsertCacheMut.Lock()
		powerOutagePeriodUpsertCache[key] = cache
		powerOutagePeriodUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PowerOutagePeriod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PowerOutagePeriod) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no PowerOutagePeriod provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), powerOutagePeriodPrimaryKeyMapping)
	sql := "DELETE FROM `power_outage_period` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from power_outage_period")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for power_outage_period")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q powerOutagePeriodQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no powerOutagePeriodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from power_outage_period")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for power_outage_period")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PowerOutagePeriodSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powerOutagePeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `power_outage_period` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, powerOutagePeriodPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from powerOutagePeriod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for power_outage_period")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PowerOutagePeriod) Reload(exec boil.Executor) error {
	ret, err := FindPowerOutagePeriod(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PowerOutagePeriodSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PowerOutagePeriodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), powerOutagePeriodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `power_outage_period`.* FROM `power_outage_period` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, powerOutagePeriodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in PowerOutagePeriodSlice")
	}

	*o = slice

	return nil
}

// PowerOutagePeriodExists checks if the PowerOutagePeriod row exists.
func PowerOutagePeriodExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `power_outage_period` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if power_outage_period exists")
	}

	return exists, nil
}
