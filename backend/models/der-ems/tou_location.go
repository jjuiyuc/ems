// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TouLocation is an object representing the database table.
type TouLocation struct {
	ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	PowerCompany null.String `boil:"power_company" json:"powerCompany,omitempty" toml:"powerCompany" yaml:"powerCompany,omitempty"`
	Location     null.String `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
	CreatedAt    time.Time   `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt    null.Time   `boil:"updated_at" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`

	R *touLocationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L touLocationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TouLocationColumns = struct {
	ID           string
	PowerCompany string
	Location     string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	PowerCompany: "power_company",
	Location:     "location",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var TouLocationTableColumns = struct {
	ID           string
	PowerCompany string
	Location     string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "tou_location.id",
	PowerCompany: "tou_location.power_company",
	Location:     "tou_location.location",
	CreatedAt:    "tou_location.created_at",
	UpdatedAt:    "tou_location.updated_at",
}

// Generated where

var TouLocationWhere = struct {
	ID           whereHelperint
	PowerCompany whereHelpernull_String
	Location     whereHelpernull_String
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpernull_Time
}{
	ID:           whereHelperint{field: "`tou_location`.`id`"},
	PowerCompany: whereHelpernull_String{field: "`tou_location`.`power_company`"},
	Location:     whereHelpernull_String{field: "`tou_location`.`location`"},
	CreatedAt:    whereHelpertime_Time{field: "`tou_location`.`created_at`"},
	UpdatedAt:    whereHelpernull_Time{field: "`tou_location`.`updated_at`"},
}

// TouLocationRels is where relationship names are stored.
var TouLocationRels = struct {
}{}

// touLocationR is where relationships are stored.
type touLocationR struct {
}

// NewStruct creates a new relationship struct
func (*touLocationR) NewStruct() *touLocationR {
	return &touLocationR{}
}

// touLocationL is where Load methods for each relationship are stored.
type touLocationL struct{}

var (
	touLocationAllColumns            = []string{"id", "power_company", "location", "created_at", "updated_at"}
	touLocationColumnsWithoutDefault = []string{"power_company", "location", "updated_at"}
	touLocationColumnsWithDefault    = []string{"id", "created_at"}
	touLocationPrimaryKeyColumns     = []string{"id"}
	touLocationGeneratedColumns      = []string{}
)

type (
	// TouLocationSlice is an alias for a slice of pointers to TouLocation.
	// This should almost always be used instead of []TouLocation.
	TouLocationSlice []*TouLocation

	touLocationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	touLocationType                 = reflect.TypeOf(&TouLocation{})
	touLocationMapping              = queries.MakeStructMapping(touLocationType)
	touLocationPrimaryKeyMapping, _ = queries.BindMapping(touLocationType, touLocationMapping, touLocationPrimaryKeyColumns)
	touLocationInsertCacheMut       sync.RWMutex
	touLocationInsertCache          = make(map[string]insertCache)
	touLocationUpdateCacheMut       sync.RWMutex
	touLocationUpdateCache          = make(map[string]updateCache)
	touLocationUpsertCacheMut       sync.RWMutex
	touLocationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single touLocation record from the query.
func (q touLocationQuery) One(exec boil.Executor) (*TouLocation, error) {
	o := &TouLocation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for tou_location")
	}

	return o, nil
}

// All returns all TouLocation records from the query.
func (q touLocationQuery) All(exec boil.Executor) (TouLocationSlice, error) {
	var o []*TouLocation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to TouLocation slice")
	}

	return o, nil
}

// Count returns the count of all TouLocation records in the query.
func (q touLocationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count tou_location rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q touLocationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if tou_location exists")
	}

	return count > 0, nil
}

// TouLocations retrieves all the records using an executor.
func TouLocations(mods ...qm.QueryMod) touLocationQuery {
	mods = append(mods, qm.From("`tou_location`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tou_location`.*"})
	}

	return touLocationQuery{q}
}

// FindTouLocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTouLocation(exec boil.Executor, iD int, selectCols ...string) (*TouLocation, error) {
	touLocationObj := &TouLocation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tou_location` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, touLocationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from tou_location")
	}

	return touLocationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TouLocation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no tou_location provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(touLocationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	touLocationInsertCacheMut.RLock()
	cache, cached := touLocationInsertCache[key]
	touLocationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			touLocationAllColumns,
			touLocationColumnsWithDefault,
			touLocationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(touLocationType, touLocationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(touLocationType, touLocationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tou_location` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tou_location` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tou_location` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, touLocationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into tou_location")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == touLocationMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for tou_location")
	}

CacheNoHooks:
	if !cached {
		touLocationInsertCacheMut.Lock()
		touLocationInsertCache[key] = cache
		touLocationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TouLocation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TouLocation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	key := makeCacheKey(columns, nil)
	touLocationUpdateCacheMut.RLock()
	cache, cached := touLocationUpdateCache[key]
	touLocationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			touLocationAllColumns,
			touLocationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update tou_location, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tou_location` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, touLocationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(touLocationType, touLocationMapping, append(wl, touLocationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update tou_location row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for tou_location")
	}

	if !cached {
		touLocationUpdateCacheMut.Lock()
		touLocationUpdateCache[key] = cache
		touLocationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q touLocationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for tou_location")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for tou_location")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TouLocationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), touLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tou_location` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, touLocationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in touLocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all touLocation")
	}
	return rowsAff, nil
}

var mySQLTouLocationUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TouLocation) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no tou_location provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	nzDefaults := queries.NonZeroDefaultSet(touLocationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTouLocationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	touLocationUpsertCacheMut.RLock()
	cache, cached := touLocationUpsertCache[key]
	touLocationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			touLocationAllColumns,
			touLocationColumnsWithDefault,
			touLocationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			touLocationAllColumns,
			touLocationPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert tou_location, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`tou_location`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tou_location` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(touLocationType, touLocationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(touLocationType, touLocationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for tou_location")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == touLocationMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(touLocationType, touLocationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for tou_location")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for tou_location")
	}

CacheNoHooks:
	if !cached {
		touLocationUpsertCacheMut.Lock()
		touLocationUpsertCache[key] = cache
		touLocationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TouLocation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TouLocation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no TouLocation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), touLocationPrimaryKeyMapping)
	sql := "DELETE FROM `tou_location` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from tou_location")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for tou_location")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q touLocationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no touLocationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from tou_location")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for tou_location")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TouLocationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), touLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tou_location` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, touLocationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from touLocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for tou_location")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TouLocation) Reload(exec boil.Executor) error {
	ret, err := FindTouLocation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TouLocationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TouLocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), touLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tou_location`.* FROM `tou_location` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, touLocationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in TouLocationSlice")
	}

	*o = slice

	return nil
}

// TouLocationExists checks if the TouLocation row exists.
func TouLocationExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tou_location` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if tou_location exists")
	}

	return exists, nil
}
