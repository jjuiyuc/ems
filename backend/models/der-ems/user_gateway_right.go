// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserGatewayRight is an object representing the database table.
type UserGatewayRight struct {
	ID        int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    null.Int64 `boil:"user_id" json:"userID,omitempty" toml:"userID" yaml:"userID,omitempty"`
	GWID      null.Int64 `boil:"gw_id" json:"gwID,omitempty" toml:"gwID" yaml:"gwID,omitempty"`
	CreatedAt time.Time  `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt null.Time  `boil:"updated_at" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`

	R *userGatewayRightR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userGatewayRightL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserGatewayRightColumns = struct {
	ID        string
	UserID    string
	GWID      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	GWID:      "gw_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var UserGatewayRightTableColumns = struct {
	ID        string
	UserID    string
	GWID      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "user_gateway_right.id",
	UserID:    "user_gateway_right.user_id",
	GWID:      "user_gateway_right.gw_id",
	CreatedAt: "user_gateway_right.created_at",
	UpdatedAt: "user_gateway_right.updated_at",
}

// Generated where

var UserGatewayRightWhere = struct {
	ID        whereHelperint64
	UserID    whereHelpernull_Int64
	GWID      whereHelpernull_Int64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint64{field: "`user_gateway_right`.`id`"},
	UserID:    whereHelpernull_Int64{field: "`user_gateway_right`.`user_id`"},
	GWID:      whereHelpernull_Int64{field: "`user_gateway_right`.`gw_id`"},
	CreatedAt: whereHelpertime_Time{field: "`user_gateway_right`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`user_gateway_right`.`updated_at`"},
}

// UserGatewayRightRels is where relationship names are stored.
var UserGatewayRightRels = struct {
	GW   string
	User string
}{
	GW:   "GW",
	User: "User",
}

// userGatewayRightR is where relationships are stored.
type userGatewayRightR struct {
	GW   *Gateway `boil:"GW" json:"GW" toml:"GW" yaml:"GW"`
	User *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userGatewayRightR) NewStruct() *userGatewayRightR {
	return &userGatewayRightR{}
}

func (r *userGatewayRightR) GetGW() *Gateway {
	if r == nil {
		return nil
	}
	return r.GW
}

func (r *userGatewayRightR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// userGatewayRightL is where Load methods for each relationship are stored.
type userGatewayRightL struct{}

var (
	userGatewayRightAllColumns            = []string{"id", "user_id", "gw_id", "created_at", "updated_at"}
	userGatewayRightColumnsWithoutDefault = []string{"user_id", "gw_id", "updated_at"}
	userGatewayRightColumnsWithDefault    = []string{"id", "created_at"}
	userGatewayRightPrimaryKeyColumns     = []string{"id"}
	userGatewayRightGeneratedColumns      = []string{}
)

type (
	// UserGatewayRightSlice is an alias for a slice of pointers to UserGatewayRight.
	// This should almost always be used instead of []UserGatewayRight.
	UserGatewayRightSlice []*UserGatewayRight

	userGatewayRightQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userGatewayRightType                 = reflect.TypeOf(&UserGatewayRight{})
	userGatewayRightMapping              = queries.MakeStructMapping(userGatewayRightType)
	userGatewayRightPrimaryKeyMapping, _ = queries.BindMapping(userGatewayRightType, userGatewayRightMapping, userGatewayRightPrimaryKeyColumns)
	userGatewayRightInsertCacheMut       sync.RWMutex
	userGatewayRightInsertCache          = make(map[string]insertCache)
	userGatewayRightUpdateCacheMut       sync.RWMutex
	userGatewayRightUpdateCache          = make(map[string]updateCache)
	userGatewayRightUpsertCacheMut       sync.RWMutex
	userGatewayRightUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userGatewayRight record from the query.
func (q userGatewayRightQuery) One(exec boil.Executor) (*UserGatewayRight, error) {
	o := &UserGatewayRight{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for user_gateway_right")
	}

	return o, nil
}

// All returns all UserGatewayRight records from the query.
func (q userGatewayRightQuery) All(exec boil.Executor) (UserGatewayRightSlice, error) {
	var o []*UserGatewayRight

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to UserGatewayRight slice")
	}

	return o, nil
}

// Count returns the count of all UserGatewayRight records in the query.
func (q userGatewayRightQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count user_gateway_right rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userGatewayRightQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if user_gateway_right exists")
	}

	return count > 0, nil
}

// GW pointed to by the foreign key.
func (o *UserGatewayRight) GW(mods ...qm.QueryMod) gatewayQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GWID),
	}

	queryMods = append(queryMods, mods...)

	return Gateways(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserGatewayRight) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadGW allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userGatewayRightL) LoadGW(e boil.Executor, singular bool, maybeUserGatewayRight interface{}, mods queries.Applicator) error {
	var slice []*UserGatewayRight
	var object *UserGatewayRight

	if singular {
		object = maybeUserGatewayRight.(*UserGatewayRight)
	} else {
		slice = *maybeUserGatewayRight.(*[]*UserGatewayRight)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userGatewayRightR{}
		}
		if !queries.IsNil(object.GWID) {
			args = append(args, object.GWID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userGatewayRightR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GWID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GWID) {
				args = append(args, obj.GWID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`gateway`),
		qm.WhereIn(`gateway.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Gateway")
	}

	var resultSlice []*Gateway
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Gateway")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for gateway")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gateway")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GW = foreign
		if foreign.R == nil {
			foreign.R = &gatewayR{}
		}
		foreign.R.GWUserGatewayRights = append(foreign.R.GWUserGatewayRights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GWID, foreign.ID) {
				local.R.GW = foreign
				if foreign.R == nil {
					foreign.R = &gatewayR{}
				}
				foreign.R.GWUserGatewayRights = append(foreign.R.GWUserGatewayRights, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userGatewayRightL) LoadUser(e boil.Executor, singular bool, maybeUserGatewayRight interface{}, mods queries.Applicator) error {
	var slice []*UserGatewayRight
	var object *UserGatewayRight

	if singular {
		object = maybeUserGatewayRight.(*UserGatewayRight)
	} else {
		slice = *maybeUserGatewayRight.(*[]*UserGatewayRight)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userGatewayRightR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userGatewayRightR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserGatewayRights = append(foreign.R.UserGatewayRights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserGatewayRights = append(foreign.R.UserGatewayRights, local)
				break
			}
		}
	}

	return nil
}

// SetGW of the userGatewayRight to the related item.
// Sets o.R.GW to related.
// Adds o to related.R.GWUserGatewayRights.
func (o *UserGatewayRight) SetGW(exec boil.Executor, insert bool, related *Gateway) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_gateway_right` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"gw_id"}),
		strmangle.WhereClause("`", "`", 0, userGatewayRightPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GWID, related.ID)
	if o.R == nil {
		o.R = &userGatewayRightR{
			GW: related,
		}
	} else {
		o.R.GW = related
	}

	if related.R == nil {
		related.R = &gatewayR{
			GWUserGatewayRights: UserGatewayRightSlice{o},
		}
	} else {
		related.R.GWUserGatewayRights = append(related.R.GWUserGatewayRights, o)
	}

	return nil
}

// RemoveGW relationship.
// Sets o.R.GW to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserGatewayRight) RemoveGW(exec boil.Executor, related *Gateway) error {
	var err error

	queries.SetScanner(&o.GWID, nil)
	if _, err = o.Update(exec, boil.Whitelist("gw_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.GW = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GWUserGatewayRights {
		if queries.Equal(o.GWID, ri.GWID) {
			continue
		}

		ln := len(related.R.GWUserGatewayRights)
		if ln > 1 && i < ln-1 {
			related.R.GWUserGatewayRights[i] = related.R.GWUserGatewayRights[ln-1]
		}
		related.R.GWUserGatewayRights = related.R.GWUserGatewayRights[:ln-1]
		break
	}
	return nil
}

// SetUser of the userGatewayRight to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserGatewayRights.
func (o *UserGatewayRight) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_gateway_right` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userGatewayRightPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &userGatewayRightR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserGatewayRights: UserGatewayRightSlice{o},
		}
	} else {
		related.R.UserGatewayRights = append(related.R.UserGatewayRights, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *UserGatewayRight) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserGatewayRights {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.UserGatewayRights)
		if ln > 1 && i < ln-1 {
			related.R.UserGatewayRights[i] = related.R.UserGatewayRights[ln-1]
		}
		related.R.UserGatewayRights = related.R.UserGatewayRights[:ln-1]
		break
	}
	return nil
}

// UserGatewayRights retrieves all the records using an executor.
func UserGatewayRights(mods ...qm.QueryMod) userGatewayRightQuery {
	mods = append(mods, qm.From("`user_gateway_right`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_gateway_right`.*"})
	}

	return userGatewayRightQuery{q}
}

// FindUserGatewayRight retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserGatewayRight(exec boil.Executor, iD int64, selectCols ...string) (*UserGatewayRight, error) {
	userGatewayRightObj := &UserGatewayRight{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_gateway_right` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userGatewayRightObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from user_gateway_right")
	}

	return userGatewayRightObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserGatewayRight) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no user_gateway_right provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(userGatewayRightColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userGatewayRightInsertCacheMut.RLock()
	cache, cached := userGatewayRightInsertCache[key]
	userGatewayRightInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userGatewayRightAllColumns,
			userGatewayRightColumnsWithDefault,
			userGatewayRightColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userGatewayRightType, userGatewayRightMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userGatewayRightType, userGatewayRightMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_gateway_right` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_gateway_right` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_gateway_right` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userGatewayRightPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into user_gateway_right")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userGatewayRightMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for user_gateway_right")
	}

CacheNoHooks:
	if !cached {
		userGatewayRightInsertCacheMut.Lock()
		userGatewayRightInsertCache[key] = cache
		userGatewayRightInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserGatewayRight.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserGatewayRight) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	key := makeCacheKey(columns, nil)
	userGatewayRightUpdateCacheMut.RLock()
	cache, cached := userGatewayRightUpdateCache[key]
	userGatewayRightUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userGatewayRightAllColumns,
			userGatewayRightPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update user_gateway_right, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_gateway_right` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userGatewayRightPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userGatewayRightType, userGatewayRightMapping, append(wl, userGatewayRightPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update user_gateway_right row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for user_gateway_right")
	}

	if !cached {
		userGatewayRightUpdateCacheMut.Lock()
		userGatewayRightUpdateCache[key] = cache
		userGatewayRightUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userGatewayRightQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for user_gateway_right")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for user_gateway_right")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserGatewayRightSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userGatewayRightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_gateway_right` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userGatewayRightPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in userGatewayRight slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all userGatewayRight")
	}
	return rowsAff, nil
}

var mySQLUserGatewayRightUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserGatewayRight) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no user_gateway_right provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	nzDefaults := queries.NonZeroDefaultSet(userGatewayRightColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserGatewayRightUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userGatewayRightUpsertCacheMut.RLock()
	cache, cached := userGatewayRightUpsertCache[key]
	userGatewayRightUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userGatewayRightAllColumns,
			userGatewayRightColumnsWithDefault,
			userGatewayRightColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userGatewayRightAllColumns,
			userGatewayRightPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert user_gateway_right, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_gateway_right`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_gateway_right` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userGatewayRightType, userGatewayRightMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userGatewayRightType, userGatewayRightMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for user_gateway_right")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userGatewayRightMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userGatewayRightType, userGatewayRightMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for user_gateway_right")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for user_gateway_right")
	}

CacheNoHooks:
	if !cached {
		userGatewayRightUpsertCacheMut.Lock()
		userGatewayRightUpsertCache[key] = cache
		userGatewayRightUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserGatewayRight record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserGatewayRight) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no UserGatewayRight provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userGatewayRightPrimaryKeyMapping)
	sql := "DELETE FROM `user_gateway_right` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from user_gateway_right")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for user_gateway_right")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userGatewayRightQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no userGatewayRightQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from user_gateway_right")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for user_gateway_right")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserGatewayRightSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userGatewayRightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_gateway_right` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userGatewayRightPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from userGatewayRight slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for user_gateway_right")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserGatewayRight) Reload(exec boil.Executor) error {
	ret, err := FindUserGatewayRight(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserGatewayRightSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserGatewayRightSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userGatewayRightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_gateway_right`.* FROM `user_gateway_right` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userGatewayRightPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in UserGatewayRightSlice")
	}

	*o = slice

	return nil
}

// UserGatewayRightExists checks if the UserGatewayRight row exists.
func UserGatewayRightExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_gateway_right` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if user_gateway_right exists")
	}

	return exists, nil
}
