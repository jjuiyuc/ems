// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package deremsmodels

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WeatherForecast is an object representing the database table.
type WeatherForecast struct {
	ID        int64        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Lat       float32      `boil:"lat" json:"lat" toml:"lat" yaml:"lat"`
	Lng       float32      `boil:"lng" json:"lng" toml:"lng" yaml:"lng"`
	Alt       null.Float32 `boil:"alt" json:"alt,omitempty" toml:"alt" yaml:"alt,omitempty"`
	ValidDate time.Time    `boil:"valid_date" json:"validDate" toml:"validDate" yaml:"validDate"`
	Data      null.JSON    `boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`
	CreatedAt time.Time    `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt time.Time    `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *weatherForecastR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L weatherForecastL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WeatherForecastColumns = struct {
	ID        string
	Lat       string
	Lng       string
	Alt       string
	ValidDate string
	Data      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Lat:       "lat",
	Lng:       "lng",
	Alt:       "alt",
	ValidDate: "valid_date",
	Data:      "data",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var WeatherForecastTableColumns = struct {
	ID        string
	Lat       string
	Lng       string
	Alt       string
	ValidDate string
	Data      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "weather_forecast.id",
	Lat:       "weather_forecast.lat",
	Lng:       "weather_forecast.lng",
	Alt:       "weather_forecast.alt",
	ValidDate: "weather_forecast.valid_date",
	Data:      "weather_forecast.data",
	CreatedAt: "weather_forecast.created_at",
	UpdatedAt: "weather_forecast.updated_at",
}

// Generated where

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var WeatherForecastWhere = struct {
	ID        whereHelperint64
	Lat       whereHelperfloat32
	Lng       whereHelperfloat32
	Alt       whereHelpernull_Float32
	ValidDate whereHelpertime_Time
	Data      whereHelpernull_JSON
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "`weather_forecast`.`id`"},
	Lat:       whereHelperfloat32{field: "`weather_forecast`.`lat`"},
	Lng:       whereHelperfloat32{field: "`weather_forecast`.`lng`"},
	Alt:       whereHelpernull_Float32{field: "`weather_forecast`.`alt`"},
	ValidDate: whereHelpertime_Time{field: "`weather_forecast`.`valid_date`"},
	Data:      whereHelpernull_JSON{field: "`weather_forecast`.`data`"},
	CreatedAt: whereHelpertime_Time{field: "`weather_forecast`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`weather_forecast`.`updated_at`"},
}

// WeatherForecastRels is where relationship names are stored.
var WeatherForecastRels = struct {
}{}

// weatherForecastR is where relationships are stored.
type weatherForecastR struct {
}

// NewStruct creates a new relationship struct
func (*weatherForecastR) NewStruct() *weatherForecastR {
	return &weatherForecastR{}
}

// weatherForecastL is where Load methods for each relationship are stored.
type weatherForecastL struct{}

var (
	weatherForecastAllColumns            = []string{"id", "lat", "lng", "alt", "valid_date", "data", "created_at", "updated_at"}
	weatherForecastColumnsWithoutDefault = []string{"lat", "lng", "alt", "valid_date", "data"}
	weatherForecastColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	weatherForecastPrimaryKeyColumns     = []string{"id"}
	weatherForecastGeneratedColumns      = []string{}
)

type (
	// WeatherForecastSlice is an alias for a slice of pointers to WeatherForecast.
	// This should almost always be used instead of []WeatherForecast.
	WeatherForecastSlice []*WeatherForecast

	weatherForecastQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	weatherForecastType                 = reflect.TypeOf(&WeatherForecast{})
	weatherForecastMapping              = queries.MakeStructMapping(weatherForecastType)
	weatherForecastPrimaryKeyMapping, _ = queries.BindMapping(weatherForecastType, weatherForecastMapping, weatherForecastPrimaryKeyColumns)
	weatherForecastInsertCacheMut       sync.RWMutex
	weatherForecastInsertCache          = make(map[string]insertCache)
	weatherForecastUpdateCacheMut       sync.RWMutex
	weatherForecastUpdateCache          = make(map[string]updateCache)
	weatherForecastUpsertCacheMut       sync.RWMutex
	weatherForecastUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single weatherForecast record from the query.
func (q weatherForecastQuery) One(exec boil.Executor) (*WeatherForecast, error) {
	o := &WeatherForecast{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: failed to execute a one query for weather_forecast")
	}

	return o, nil
}

// All returns all WeatherForecast records from the query.
func (q weatherForecastQuery) All(exec boil.Executor) (WeatherForecastSlice, error) {
	var o []*WeatherForecast

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "deremsmodels: failed to assign all query results to WeatherForecast slice")
	}

	return o, nil
}

// Count returns the count of all WeatherForecast records in the query.
func (q weatherForecastQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to count weather_forecast rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q weatherForecastQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: failed to check if weather_forecast exists")
	}

	return count > 0, nil
}

// WeatherForecasts retrieves all the records using an executor.
func WeatherForecasts(mods ...qm.QueryMod) weatherForecastQuery {
	mods = append(mods, qm.From("`weather_forecast`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`weather_forecast`.*"})
	}

	return weatherForecastQuery{q}
}

// FindWeatherForecast retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWeatherForecast(exec boil.Executor, iD int64, selectCols ...string) (*WeatherForecast, error) {
	weatherForecastObj := &WeatherForecast{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `weather_forecast` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, weatherForecastObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "deremsmodels: unable to select from weather_forecast")
	}

	return weatherForecastObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WeatherForecast) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no weather_forecast provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(weatherForecastColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	weatherForecastInsertCacheMut.RLock()
	cache, cached := weatherForecastInsertCache[key]
	weatherForecastInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			weatherForecastAllColumns,
			weatherForecastColumnsWithDefault,
			weatherForecastColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(weatherForecastType, weatherForecastMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(weatherForecastType, weatherForecastMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `weather_forecast` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `weather_forecast` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `weather_forecast` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, weatherForecastPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to insert into weather_forecast")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == weatherForecastMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for weather_forecast")
	}

CacheNoHooks:
	if !cached {
		weatherForecastInsertCacheMut.Lock()
		weatherForecastInsertCache[key] = cache
		weatherForecastInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the WeatherForecast.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WeatherForecast) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	weatherForecastUpdateCacheMut.RLock()
	cache, cached := weatherForecastUpdateCache[key]
	weatherForecastUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			weatherForecastAllColumns,
			weatherForecastPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("deremsmodels: unable to update weather_forecast, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `weather_forecast` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, weatherForecastPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(weatherForecastType, weatherForecastMapping, append(wl, weatherForecastPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update weather_forecast row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by update for weather_forecast")
	}

	if !cached {
		weatherForecastUpdateCacheMut.Lock()
		weatherForecastUpdateCache[key] = cache
		weatherForecastUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q weatherForecastQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all for weather_forecast")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected for weather_forecast")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WeatherForecastSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("deremsmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weatherForecastPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `weather_forecast` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, weatherForecastPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to update all in weatherForecast slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to retrieve rows affected all in update all weatherForecast")
	}
	return rowsAff, nil
}

var mySQLWeatherForecastUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WeatherForecast) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("deremsmodels: no weather_forecast provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(weatherForecastColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWeatherForecastUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	weatherForecastUpsertCacheMut.RLock()
	cache, cached := weatherForecastUpsertCache[key]
	weatherForecastUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			weatherForecastAllColumns,
			weatherForecastColumnsWithDefault,
			weatherForecastColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			weatherForecastAllColumns,
			weatherForecastPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("deremsmodels: unable to upsert weather_forecast, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`weather_forecast`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `weather_forecast` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(weatherForecastType, weatherForecastMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(weatherForecastType, weatherForecastMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to upsert for weather_forecast")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == weatherForecastMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(weatherForecastType, weatherForecastMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to retrieve unique values for weather_forecast")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to populate default values for weather_forecast")
	}

CacheNoHooks:
	if !cached {
		weatherForecastUpsertCacheMut.Lock()
		weatherForecastUpsertCache[key] = cache
		weatherForecastUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single WeatherForecast record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WeatherForecast) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("deremsmodels: no WeatherForecast provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), weatherForecastPrimaryKeyMapping)
	sql := "DELETE FROM `weather_forecast` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete from weather_forecast")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by delete for weather_forecast")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q weatherForecastQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("deremsmodels: no weatherForecastQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from weather_forecast")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for weather_forecast")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WeatherForecastSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weatherForecastPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `weather_forecast` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, weatherForecastPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: unable to delete all from weatherForecast slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "deremsmodels: failed to get rows affected by deleteall for weather_forecast")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WeatherForecast) Reload(exec boil.Executor) error {
	ret, err := FindWeatherForecast(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WeatherForecastSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WeatherForecastSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weatherForecastPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `weather_forecast`.* FROM `weather_forecast` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, weatherForecastPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "deremsmodels: unable to reload all in WeatherForecastSlice")
	}

	*o = slice

	return nil
}

// WeatherForecastExists checks if the WeatherForecast row exists.
func WeatherForecastExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `weather_forecast` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "deremsmodels: unable to check if weather_forecast exists")
	}

	return exists, nil
}
